<!DOCTYPE html>
<html lang="en">

<head>
   <meta charset="UTF-8" />
   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   <title>ALL SERIES - ITE BACK OFFICE MANAGEMENT</title>
   <link rel="stylesheet" type="text/css"
      href="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-neptune/resources/theme-neptune-all.css" />
   <script src="https://kit.fontawesome.com/ade53cd309.js" crossorigin="anonymous"></script>
   <script type="text/javascript" src="/controller/userAuthServices.js"></script>

   <!-- ----------------------------- DEVELOPMENT ----------------------------- -->
   <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"></script>

   <!-- ----------------------------- PRODUCTION ------------------------------ -->
   <!-- <script type="text/javascript" src="/extjs/ext-all-debug.js"></script> -->
   <style>
      .x-grid-cell-inner {
         overflow: hidden;
         padding: 10px 6px;
         white-space: nowrap;
      }

      .fieldClass {
         border-bottom: 1px dashed rgb(173, 173, 173);
         padding: 7px 0px;
      }

      .a {
         display: block;
      }

      .a span {
         background-color: rgb(253, 253, 253);
         padding: 2px;
         color: black;
      }

      #small-view {
         display: none;
      }

      @media (max-width: 481px) {

         #productDetails,
         #mainPanel {
            display: none !important;
         }

         #small-view {
            margin-top: 4rem;
            font-size: 40px;
            height: 100vh;
            width: 100vw;
            line-height: 50px;
            display: block !important;
         }
      }

      #ENFIELD-legendTitle,
      #SPFIELD-legendTitle,
      #FRFIELD-legendTitle,
      #DEFIELD-legendTitle,
      #RUFIELD-legendTitle {
         font-weight: bold;
      }
   </style>
   <script type="text/javascript">
      //=========================================================================================================
      //		           APPLICATION START
      // ========================================================================================================
      Ext.onReady(() => {
         // // FOR TESTING 
         // let userRightObject = {
         //    english: "V",
         //    french: "V",
         //    german: "E",
         //    pictures: "V",
         //    related: "E",
         //    russian: "E",
         //    spanish: "E",
         //    usrid: "AG",
         //    usrname: "Ann De Gucht"
         // };

         // let userRightString = JSON.stringify(userRightObject);
         // localStorage.setItem('userRights', userRightString);

         // // =============================================


         let edit = false;
         let serieIDGlobal = '';
         Ext.define('MyApp.view.Form', {
            extend: 'Ext.form.Panel',
            xtype: 'my-form',

         });
         const relatedProducts = (products) => {
            let exist = false;

            for (const prod of products) {
               if (prod.Type === "R") {
                  exist = true;
               }
            }

            if (exist) {
               return products.map((product) => {
                  if (product.Type === "R") {
                     let description = product.Description ? product.Description : product.Title;
                     return {
                        xtype: "toolbar",
                        dock: "top",
                        style: "border: none; margin: 0px; padding: 0px;",
                        items: [
                           {
                              xtype: "button",
                              text: "",
                              iconCls: "fa fa-trash-alt",
                              scale: "small",
                              style: "border: none; margin: 2px;",
                              handler: function () {
                                 Ext.Msg.confirm('Confirm delete', "Are you sure you want to remove this related product ?", function (btn, text) {
                                    if (btn == 'yes') {
                                       Ext.getBody().mask('Deleting', 'x-msg-loading');
                                       Ext.Ajax.request({
                                          url: "/api/deleteSerieRelatedProductFromDetailsView",
                                          method: "POST",
                                          cors: true,
                                          useDefaultXhrHeader: false,
                                          params: {
                                             Id: product.Id,

                                          },
                                          success: function (response) {
                                             // check for errors and display error message
                                             var check = response.responseText;
                                             if (check) {
                                                var data = eval("(" + response.responseText + ")");

                                                if (data.serverStatus == 2) {
                                                   Ext.getCmp("relatedProducts").removeAll();
                                                   Ext.getCmp("relatedAccessories").removeAll();
                                                   Ext.getCmp("relatedParts").removeAll();
                                                   getSerieDetails(serieIDGlobal);
                                                   Ext.getBody().unmask();
                                                   Ext.Msg.alert(
                                                      "Success",
                                                      "You have successfully deleted the related product"
                                                   );
                                                } else {
                                                   // display error message
                                                   Ext.getBody().unmask();
                                                   Ext.Msg.alert(
                                                      "ERROR",
                                                      "Failed to delete the related product. Contact your IT team."
                                                   );
                                                }
                                             }
                                          },
                                          failure: function (response) {
                                             Ext.getBody().unmask();
                                             Ext.Msg.alert(
                                                "ERROR",
                                                "Failed to delete related product. Contact your IT team."
                                             );
                                          },

                                       });
                                    }
                                 })


                              },
                           }, {

                              xtype: "button",
                              text: `${description} [${product.Code}]`,
                              // cls: "a",
                              style: "border: none; margin: 2px 0px;",
                              handler: () => {
                                 Ext.getCmp("relatedProducts").removeAll();
                                 Ext.getCmp("relatedAccessories").removeAll();
                                 Ext.getCmp("relatedParts").removeAll();
                                 if (product.LinkedSeriesID) {
                                    getSerieDetails(product.LinkedSeriesID);
                                 } else {
                                    getProductDetails(product.LinkedProductID);
                                 }
                                 productIDGlobal = product.LinkedProductID;
                                 // Ext.getCmp("productDetails").setTitle(
                                 //    `PRODUCT DETAILS - ${product.Code}`
                                 // );
                                 // Ext.getCmp("viewport").setActiveItem("productDetails");
                              },

                           }
                        ],

                     }

                  }
               });
            } else {
               return [
                  {
                     xtype: "displayfield",
                     fieldLabel: "<b>Result</b>",
                     value: "No Related Products",
                     labelWidth: 44,
                  },
               ];
            }
         };

         const relatedAccessories = (products) => {
            let exist = false;

            for (const prod of products) {
               if (prod.Type === "A") {
                  exist = true;
               }
            }
            if (exist) {
               return products.map((product) => {
                  if (product.Type === "A") {
                     let description = product.Description ? product.Description : "N/A";
                     return {
                        xtype: "toolbar",
                        dock: "top",
                        style: "border: none; margin: 0px; padding: 0px;",
                        items: [
                           {
                              xtype: "button",
                              text: "",
                              iconCls: "fa fa-trash-alt",
                              scale: "small",
                              style: "border: none; margin: 2px;",
                              handler: function () {
                                 Ext.Msg.confirm('Confirm delete', "Are you sure you want to remove this related product ?", function (btn, text) {
                                    if (btn == 'yes') {
                                       Ext.getBody().mask('Deleting', 'x-msg-loading');
                                       Ext.Ajax.request({
                                          url: "/api/deleteSerieRelatedProductFromDetailsView",
                                          method: "POST",
                                          cors: true,
                                          useDefaultXhrHeader: false,
                                          params: {
                                             Id: product.Id,

                                          },
                                          success: function (response) {
                                             // check for errors and display error message
                                             var check = response.responseText;
                                             if (check) {
                                                var data = eval("(" + response.responseText + ")");

                                                if (data.serverStatus == 2) {
                                                   Ext.getCmp("relatedProducts").removeAll();
                                                   Ext.getCmp("relatedAccessories").removeAll();
                                                   Ext.getCmp("relatedParts").removeAll();
                                                   getSerieDetails(serieIDGlobal);
                                                   Ext.getBody().unmask();
                                                   Ext.Msg.alert(
                                                      "Success",
                                                      "You have successfully deleted the related product"
                                                   );
                                                } else {
                                                   // display error message
                                                   Ext.getBody().unmask();
                                                   Ext.Msg.alert(
                                                      "ERROR",
                                                      "Failed to delete the related product. Contact your IT team."
                                                   );
                                                }
                                             }
                                          },
                                          failure: function (response) {
                                             Ext.getBody().unmask();
                                             Ext.Msg.alert(
                                                "ERROR",
                                                "Failed to delete related product. Contact your IT team."
                                             );
                                          },

                                       });
                                    }
                                 })


                              },
                           }, {
                              xtype: "button",
                              text: `${description} [${product.Code}]`,
                              cls: "a",
                              style: "border: none; margin: 2px 0px;",
                              handler: () => {
                                 Ext.getCmp("relatedProducts").removeAll();
                                 Ext.getCmp("relatedAccessories").removeAll();
                                 Ext.getCmp("relatedParts").removeAll();
                                 getSerieDetails(product.LinkedProductID ?? product.LinkedSeriesID);
                                 productIDGlobal = product.LinkedProductID;

                              },
                           }
                        ],

                     }

                  }
               });


            } else {
               return [
                  {
                     xtype: "displayfield",
                     fieldLabel: "<b>Result</b>",
                     value: "No Related Accessories",
                     labelWidth: 44,
                  },
               ];
            }
         };

         const relatedParts = (products) => {
            let exist = false;

            for (const prod of products) {
               if (prod.Type === "P") {
                  exist = true;
               }
            }
            if (exist) {
               return products.map((product) => {
                  if (product.Type === "P") {
                     let description = product.Description ? product.Description : "N/A";
                     return {
                        xtype: "toolbar",
                        dock: "top",
                        style: "border: none; margin: 0px; padding: 0px;",
                        items: [
                           {
                              xtype: "button",
                              text: "",
                              iconCls: "fa fa-trash-alt",
                              scale: "small",
                              style: "border: none; margin: 2px;",
                              handler: function () {
                                 Ext.Msg.confirm('Confirm delete', "Are you sure you want to remove this related product ?", function (btn, text) {
                                    if (btn == 'yes') {
                                       Ext.getBody().mask('Deleting', 'x-msg-loading');
                                       Ext.Ajax.request({
                                          url: "/api/deleteSerieRelatedProductFromDetailsView",
                                          method: "POST",
                                          cors: true,
                                          useDefaultXhrHeader: false,
                                          params: {
                                             Id: product.Id,

                                          },
                                          success: function (response) {
                                             // check for errors and display error message
                                             var check = response.responseText;
                                             if (check) {
                                                var data = eval("(" + response.responseText + ")");

                                                if (data.serverStatus == 2) {
                                                   Ext.getCmp("relatedProducts").removeAll();
                                                   Ext.getCmp("relatedAccessories").removeAll();
                                                   Ext.getCmp("relatedParts").removeAll();
                                                   getSerieDetails(serieIDGlobal);
                                                   Ext.getBody().unmask();
                                                   Ext.Msg.alert(
                                                      "Success",
                                                      "You have successfully deleted the related product"
                                                   );
                                                } else {
                                                   // display error message
                                                   Ext.getBody().unmask();
                                                   Ext.Msg.alert(
                                                      "ERROR",
                                                      "Failed to delete the related product. Contact your IT team."
                                                   );
                                                }
                                             }
                                          },
                                          failure: function (response) {
                                             Ext.getBody().unmask();
                                             Ext.Msg.alert(
                                                "ERROR",
                                                "Failed to delete related product. Contact your IT team."
                                             );
                                          },

                                       });
                                    }
                                 })


                              },
                           }, {
                              xtype: "button",
                              text: `${description} [${product.Code}]`,
                              cls: "a",
                              style: "border: none; margin: 2px 0px;",
                              handler: () => {
                                 Ext.getCmp("relatedProducts").removeAll();
                                 Ext.getCmp("relatedAccessories").removeAll();
                                 Ext.getCmp("relatedParts").removeAll();
                                 getSerieDetails(product.LinkedProductID ?? product.LinkedSeriesID);
                                 productIDGlobal = product.LinkedProductID;;
                              },
                           }
                        ],

                     }

                  }
               });
            } else {
               return [
                  {
                     xtype: "displayfield",
                     fieldLabel: "<b>Result</b>",
                     value: "No Related Parts",
                     labelWidth: 44,
                  },
               ];
            }
         };

         const getSerieDetails = (serieId) => {
            Ext.Ajax.request({
               url: "/api/getSerieDetails",
               method: "GET",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  serieId: serieId,
               },

               success: function (response) {
                  const res = JSON.parse(response.responseText);
                  Ext.getCmp('seriesIdImage').setValue(serieId);
                  if (edit === false) {
                     displaySerieInfo(res[0][0]);
                  } else {
                     getEditInfo(res[0][0]);
                  }

                  Ext.getCmp("relatedProducts").add(relatedProducts(res[1]));
                  Ext.getCmp("relatedAccessories").add(relatedAccessories(res[1]));
                  Ext.getCmp("relatedParts").add(relatedParts(res[1]));
               },
               failure: function (response) {
                  console.log("failed", response);
               },
            });
         };

         const getProductDetails = (productId) => {
            Ext.Ajax.request({
               url: "/api/getProductDetails",
               method: "GET",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  productId: productId,
               },

               success: function (response) {
                  const res = JSON.parse(response.responseText);
                  if (edit === false) {

                     Ext.getCmp('productInfoContainer').removeAll();
                     Ext.getCmp('productInfoContainer').add(productDetailItems);
                     displayProductInfo(res[0][0]);
                  }
                  Ext.getCmp("relatedProducts").add(relatedProducts(res[1]));
                  Ext.getCmp("relatedAccessories").add(relatedAccessories(res[1]));
                  Ext.getCmp("relatedParts").add(relatedParts(res[1]));
               },
               failure: function (response) {
                  console.log("failed", response);
               },
            });
         };


         const getEditInfo = (serie) => {
            Ext.getCmp("Title").setValue(serie.Title);
            Ext.getCmp("Key").setValue(serie.Key);
            Ext.getCmp("FDesc").setValue(serie.FullDescription);
            Ext.getCmp("spec").setValue(serie.Specification);
         };


         const displaySerieInfo = (serie) => {
            Ext.getCmp("key").setValue(serie.Key);
            Ext.getCmp("title").setValue(serie.Title);
            Ext.getCmp("fullDescription").setValue(
               serie.FullDescription || "No Full Description"
            );
            Ext.getCmp("specification").setValue(
               serie.Specification || "No Specification"
            );
         };


         const displayProductInfo = (product) => {
            Ext.getCmp("productName").setValue(product.Catalog);
            Ext.getCmp("productCode").setValue(product.CODE);
            Ext.getCmp("as400Code").setValue(product.As400Code);
            Ext.getCmp("as400Description").setValue(product.Description);
            Ext.getCmp("fullDescription").setValue(
               product.FullDescription ?? "No Full Description"
            );
            Ext.getCmp("specification").setValue(
               product.Specification ?? "No Specification"
            );
         };

         const getOtherLanguageDetail = (language, serieId) => {

            Ext.Ajax.request({
               url: "/api/getOtherLanguageDetailSerie",
               method: "POST",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  language: language,
                  serieId: serieId,
               },
               success: function (response) {
                  const res = JSON.parse(response.responseText);
                  Ext.getCmp(`${language.toUpperCase()}Title`).setValue(res[0].Title);
                  Ext.getCmp(`${language.toUpperCase()}FDesc`).setValue(res[0].FullDescription);
                  Ext.getCmp(`${language.toUpperCase()}spec`).setValue(res[0].Specification);
               },
               failure: function (response) {
                  console.log("failed", response);
               },
            });
         }


         // const saveSpecEdit = (records) => {
         //    let check = {};
         //    records.forEach(rec => {
         //       check[rec.data.SerieMasterId] = true;
         //    })

         //    records.forEach(record => {
         //       Ext.Ajax.request({
         //          url: "/api/updateSerieSpecs",
         //          method: "POST",
         //          cors: true,
         //          useDefaultXhrHeader: false,
         //          params: {
         //             SerieMasterId: record.data.SerieMasterId,
         //             SeriesProductLinkId: record.data.SeriesProductLinkId,
         //             Value: record.data.Value,
         //          },
         //          success: function (response) {
         //             delete check[record.data.SerieMasterId];

         //             if (Object.keys(check).length === 0) {
         //                Ext.Msg.alert('INFO', "Serie Specifications updated successfully");
         //                serieSpecStore.reload();
         //             }
         //          },
         //          failure: function (response) {
         //             Ext.getBody().unmask();
         //             Ext.Msg.alert(
         //                "ERROR",
         //                "Failed to update Specification. Contact your IT team."
         //             );
         //          },
         //       });
         //    })
         // }

         const addSpecValue = () => {
            const form = Ext.getCmp('addSpecValueForm').getForm();

            if (form.isValid()) {
               Ext.Ajax.request({
                  url: "/api/addSpecValue",
                  method: "POST",
                  cors: true,
                  useDefaultXhrHeader: false,
                  params: {
                     Key: Ext.getCmp('aaaaaaa').getValue(),
                     Value: Ext.getCmp('aaaaaaa').getValue(),
                     Group: Ext.getCmp('aaaaaaa').getValue(),
                     SubGroup: Ext.getCmp('aaaaaaa').getValue(),
                     SeriesMasterId: Ext.getCmp('aaaaaaa').getValue(),
                  },
                  success: function (response) {
                     const res = JSON.parse(response.responseText)


                  },
                  failure: function (response) {
                     Ext.getBody().unmask();
                     Ext.Msg.alert(
                        "ERROR",
                        "Failed to update Specification. Contact your IT team."
                     );
                  },
               });
            } else {
               Ext.Msg.alert('INFO', "Form is not valid.")
            }
         }


         const Model = Ext.define("Categories", {
            extend: "Ext.data.Model",
            fields: ["Sid", "Key", "Title", "CreatedOn", "ModifiedOn", "Publish"],
         });
         const mainStore = Ext.create("Ext.data.Store", {
            id: "mainStore",
            autoLoad: true,
            model: Model,

            proxy: {
               type: "ajax",
               method: "POST",
               url: "/api/getAllSeries",
               noCache: true,
               reader: {
                  type: "json",

               },
               cors: true,
               useDefaultXhrHeader: false,
            },
            listeners: {
               beforeload: function (store) { },
            },
         });


         const addSerieMasterSpecs = (serieId) => {
            Ext.Ajax.request({
               url: "/api/addSerieMasterSpecs",
               method: "POST",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  serieId: serieId,
                  Key: Ext.getCmp('specKey').getValue(),
                  Group: Ext.getCmp('specGroup').getValue(),
                  SubGroup: Ext.getCmp('specSubGroup').getValue(),
               },
               success: function (response) {
                  const res = JSON.parse(response.responseText);
                  if (res) {
                     Ext.Msg.alert("INFO", "New Specification added successfully");
                     serieMasterStore.reload();
                     Ext.getCmp('viewport').setActiveItem('SeriesMasterSpecs')
                  }
               },
               failure: function (response) {
                  console.log("failed", response);
               },
            });
         }

         const searchSerie = (searchField) => {
            let searchQuery = Ext.getCmp(searchField).getValue();
            Ext.Ajax.request({
               url: "/api/searchSerie",
               method: "POST",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  searchQuery: searchQuery,
               },
               success: function (response) {
                  const res = JSON.parse(response.responseText);

                  res
                     ? mainStore.setData(res)
                     : console.log("no response received");
               },
               failure: function (response) {
                  console.log("failed", response);
               },
            });
         };
         //add Series
         let current_datetime = new Date();
         var time = function () {
            if (current_datetime.getMonth() + 1 < 10) {
               return "0" + Number(current_datetime.getMonth() + 1);
            } else {
               current_datetime.getMonth() + 1;
            }
         };

         let formatDate =
            current_datetime.getDate() +
            "/" +
            time() +
            "/" +
            current_datetime.getFullYear();


         var addSerie = function () {
            Ext.getBody().mask("Saving", "x-msg-loading");
            Ext.Ajax.request({
               url: "/api/addSeries",
               method: "POST",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  Key: Ext.getCmp("Key").getValue().trim(),
                  Language: "en",
                  CreatedOn: formatDate,
                  Title: Ext.getCmp("Title").getValue().trim(),
                  Specification: Ext.getCmp("spec").getValue(),
                  FullDescription: Ext.getCmp("FDesc").getValue(),
                  //FR
                  FRLanguage: "fr",
                  FRTitle: Ext.getCmp("FRTitle").getValue().trim(),
                  FRSpecification: Ext.getCmp("FRspec").getValue(),
                  FRFullDescription: Ext.getCmp("FRFDesc").getValue(),
                  //DE
                  DELanguage: "de",
                  DETitle: Ext.getCmp("DETitle").getValue().trim(),
                  DESpecification: Ext.getCmp("DEspec").getValue(),
                  DEFullDescription: Ext.getCmp("DEFDesc").getValue(),
                  //SP
                  SPLanguage: "sp",
                  SPTitle: Ext.getCmp("SPTitle").getValue().trim(),
                  SPSpecification: Ext.getCmp("SPspec").getValue(),
                  SPFullDescription: Ext.getCmp("SPFDesc").getValue(),
                  //RU
                  RULanguage: "ru",
                  RUTitle: Ext.getCmp("RUTitle").getValue().trim(),
                  RUSpecification: Ext.getCmp("RUspec").getValue(),
                  RUFullDescription: Ext.getCmp("RUFDesc").getValue(),
               },
               success: function (response) {
                  // check for errors and display error message
                  var check = response.responseText;
                  if (check) {
                     var data = JSON.parse(check);
                     if (data) {
                        Ext.getBody().unmask();
                        Ext.Msg.alert(
                           "Series",
                           "You have successfully add series",
                           function (btn, text) {
                              Ext.getCmp("viewport").setActiveItem('SeriesGrid');
                           }
                        );
                     } else {
                        // display error message
                        Ext.getBody().unmask();
                        Ext.Msg.alert(
                           "ERROR",
                           "Failed to add the series. Contact your IT team."
                        );
                     }
                  }
               },
               failure: function (response) {
                  Ext.getBody().unmask();
                  Ext.Msg.alert(
                     "ERROR",
                     "Failed to add the series. Contact your IT team."
                  );
               },
            });
         };

         var editSerie = function () {
            Ext.getBody().mask("Saving", "x-msg-loading");
            Ext.Ajax.request({
               url: "/api/editSeries",
               method: "POST",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  Key: Ext.getCmp("Key").getValue().trim(),
                  SeriesId: serieIDGlobal,
                  Language: "en",
                  ModifiedOn: formatDate,
                  Title: Ext.getCmp("Title").getValue().trim(),
                  Specification: Ext.getCmp("spec").getValue(),
                  FullDescription: Ext.getCmp("FDesc").getValue(),
                  //FR
                  FRLanguage: "fr",
                  FRTitle: Ext.getCmp("FRTitle").getValue().trim(),
                  FRSpecification: Ext.getCmp("FRspec").getValue(),
                  FRFullDescription: Ext.getCmp("FRFDesc").getValue(),
                  //DE
                  DELanguage: "de",
                  DETitle: Ext.getCmp("DETitle").getValue().trim(),
                  DESpecification: Ext.getCmp("DEspec").getValue(),
                  DEFullDescription: Ext.getCmp("DEFDesc").getValue(),
                  //SP
                  SPLanguage: "sp",
                  SPTitle: Ext.getCmp("SPTitle").getValue().trim(),
                  SPSpecification: Ext.getCmp("SPspec").getValue(),
                  SPFullDescription: Ext.getCmp("SPFDesc").getValue(),
                  //RU
                  RULanguage: "ru",
                  RUTitle: Ext.getCmp("RUTitle").getValue().trim(),
                  RUSpecification: Ext.getCmp("RUspec").getValue(),
                  RUFullDescription: Ext.getCmp("RUFDesc").getValue(),
               },
               success: function (response) {
                  // check for errors and display error message
                  var check = response.responseText;
                  if (check) {
                     var data = JSON.parse(check);
                     if (data) {
                        Ext.getBody().unmask();
                        Ext.Msg.alert(
                           "Series",
                           `You have successfully edited serie`,
                        );
                        Ext.getCmp("viewport").setActiveItem('SeriesGrid');
                        mainStore.reload();
                     } else {
                        // display error message
                        Ext.getBody().unmask();
                        Ext.Msg.alert(
                           "ERROR",
                           "Failed to add the series. Contact your IT team."
                        );
                     }
                  }
               },
               failure: function (response) {
                  Ext.getBody().unmask();
                  Ext.Msg.alert(
                     "ERROR",
                     "Failed to add the series. Contact your IT team."
                  );
               },
            });
         };


         const linkedProductModel = Ext.define("Categories", {
            extend: "Ext.data.Model",
            fields: ["Id", "CODE", "Catalog", "Group", "SubGroup"],
         });

         const linkedProductStore = Ext.create("Ext.data.Store", {
            id: "mainStore",
            autoLoad: true,
            model: linkedProductModel,
            proxy: {
               type: "ajax",
               method: "GET",
               url: "/api/getRelatedProductSerie",
               noCache: true,
               reader: {
                  type: "json",

               },
               cors: true,
               useDefaultXhrHeader: false,
            },
            listeners: {
               beforeload: function (store) {
               },
            },
         });


         let linkedProductColumns = []

         const getRelatedProductSerie = (serieId) => {
            Ext.Ajax.request({
               url: "/api/getRelatedProductSerie",
               method: "GET",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  serieId: serieId,
               },
               success: function (response) {
                  const res = JSON.parse(response.responseText);

                  console.log(res)
                  let keys = Object.keys(res[0]);

                  let allColumns = keys.map(key => { //ongoing
                     let width = 150;
                     if (key === 'Name') {
                        width = 300;
                     }

                     if (key !== "Name" && key !== "id" && key !== "Code" && key !== "SPLid" && key !== "SerieMasterId") {

                        return {
                           header: key,
                           sortable: true,
                           width: width,
                           dataIndex: key,
                           editor: {
                              completeOnEnter: true,
                              field: {
                                 xtype: "textfield",
                                 allowBlank: false,

                              },

                           }
                        }
                     } else if (key == "SPLid" || key == "SerieMasterId") {
                        return {
                           header: key,
                           sortable: true,
                           width: width,
                           dataIndex: key,
                           hidden: true
                        }
                     } else {
                        return {
                           header: key,
                           sortable: true,
                           width: width,
                           dataIndex: key,
                        }
                     }
                  })

                  linkedProducts.reconfigure(undefined, allColumns);
                  res
                     ? linkedProductStore.setData(res)
                     : console.log("no response received");
               },
               failure: function (response) {
                  console.log("failed", response);
               },
            });
         }


         const specGroupModel = Ext.define("Categories", {
            extend: "Ext.data.Model",
            fields: ["Group"],
         });

         const specGroupStore = Ext.create("Ext.data.Store", {
            id: "specGroupStore",
            autoLoad: true,
            model: specGroupModel,
            proxy: {
               type: "ajax",
               method: "GET",
               url: "/api/getSpecGroup",
               noCache: true,
               reader: {
                  type: "json",

               },
               cors: true,
               useDefaultXhrHeader: false,
            },
            listeners: {
               beforeload: function (store) {
               },
            },
         });


         // const serieSpecModel = Ext.define("Categories", {
         //    extend: "Ext.data.Model",
         //    fields: ["SerieMasterId", "Key", "Value"],
         // });

         // const serieSpecStore = Ext.create("Ext.data.Store", {
         //    id: "mainStore",
         //    autoLoad: true,
         //    model: serieSpecModel,
         //    proxy: {
         //       type: "ajax",
         //       method: "GET",
         //       url: "/api/getSerieSpecs",
         //       noCache: true,
         //       reader: {
         //          type: "json",

         //       },
         //       cors: true,
         //       useDefaultXhrHeader: false,
         //    },
         //    listeners: {
         //       beforeload: function (store) {
         //       },
         //    },
         // });




         // const serieSpecColumn = [
         //    {
         //       header: "SerieMasterId",
         //       sortable: true,
         //       width: 100,
         //       dataIndex: "SerieMasterId",
         //    },
         //    {
         //       header: "Name",
         //       sortable: true,
         //       width: 150,
         //       dataIndex: "Name",
         //    },
         //    {
         //       header: "Current Value",
         //       sortable: true,
         //       width: 150,
         //       dataIndex: "CurrentValue",
         //    },
         //    {
         //       header: "New Value",
         //       sortable: true,
         //       width: 150,
         //       dataIndex: "Value",
         //       editor: {
         //          completeOnEnter: true,
         //          field: {
         //             xtype: "textfield",
         //             allowBlank: false,
         //          },
         //       },
         //    },
         // ]

         var deleteSeries = function () {
            const selectedRecord = Ext.getCmp("SeriesGrid")
               .getSelectionModel()
               .getSelection()[0];
            Ext.Msg.confirm('Confirm delete', "Are you sure you want to remove this series ?", function (btn, text) {
               if (btn == 'yes') {
                  Ext.getBody().mask('Deleting', 'x-msg-loading');
                  Ext.Ajax.request({
                     url: "/api/deleteSeries",
                     method: "POST",
                     cors: true,
                     useDefaultXhrHeader: false,
                     params: {
                        SeriesId: selectedRecord.data.Sid
                     },
                     success: function (response) {
                        // check for errors and display error message
                        var check = response.responseText;
                        if (check) {
                           var data = eval("(" + response.responseText + ")");

                           if (data.serverStatus == 2) {

                              mainStore.reload();
                              Ext.getBody().unmask();
                              Ext.Msg.alert(
                                 "Success",
                                 "You have successfully deleted the series"
                              );
                           } else {
                              // display error message
                              Ext.getBody().unmask();
                              Ext.Msg.alert(
                                 "ERROR",
                                 "Failed to delete the series. Contact your IT team."
                              );
                           }
                        }
                     },
                     failure: function (response) {
                        Ext.getBody().unmask();
                        Ext.Msg.alert(
                           "ERROR",
                           "Failed to delete series. Contact your IT team."
                        );
                     },

                  });

               }
            })
         }

         const linkedProductTbar = [
            {
               xtype: "toolbar",
               dock: "top",
               id: "linkedProductTbar",
               items: [
                  {
                     xtype: "button",
                     id: "serieLinkBack",
                     text: "Back",
                     iconCls: "fa fa-undo-alt",
                     scale: "small",
                     handler: function () {
                        Ext.getCmp('viewport').setActiveItem('SerieDetails')
                     },
                  },
                  "-",
                  {
                     xtype: "button",
                     id: "addRelatedProducts",
                     text: "Add Linked Product",
                     iconCls: "fa fa-plus",
                     handler: function () {
                        //Ext.getCmp('fromViewSave').setHidden(false);
                        //Ext.getCmp('fromAddSave').setHidden(true);
                        Ext.getCmp("viewport").setActiveItem("panelAddRelated");
                     },
                  },
                  "-",
                  {
                     xtype: "button",
                     id: "deleteRelatedProducts",
                     text: "Delete Linked Product",
                     iconCls: "fa fa-trash",
                     handler: function () {
                        Ext.Msg.confirm('Confirm delete', "Are you sure you want to remove this related product ?", function (btn, text) {
                           if (btn == 'yes') {
                              var selectedrecords = linkedProducts.getSelectionModel().getSelection();
                              var teller = selectedrecords.length;
                              currentsubfileRecord = selectedrecords[0];
                              Ext.getBody().mask("Saving", "x-msg-loading");
                              Ext.Ajax.request({
                                 url: "/api/deleteSerieRelatedProduct",
                                 method: "POST",
                                 cors: true,
                                 useDefaultXhrHeader: false,
                                 params: {
                                    SeriesId: serieIDGlobal,
                                    ProductId: currentsubfileRecord.data.id,
                                    SeriesMasterId: currentsubfileRecord.data.SerieMasterId,
                                    SPLid: currentsubfileRecord.data.SPLid
                                 },
                                 success: function (response) {
                                    // check for errors and display error message
                                    var check = response.responseText;
                                    if (check) {
                                       var data = eval("(" + response.responseText + ")");
                                       if (data.serverStatus == 2) {

                                          Ext.getBody().unmask();
                                          Ext.Msg.alert(
                                             "Success",
                                             "You have successfully delete the related product"
                                          );
                                          linkedProductStore.reload()
                                       } else {
                                          // display error message
                                          Ext.getBody().unmask();
                                          Ext.Msg.alert(
                                             "ERROR",
                                             "Failed to delete the related product. Contact your IT team."
                                          );
                                       }
                                    }
                                 },
                                 failure: function (response) {
                                    Ext.getBody().unmask();
                                    Ext.Msg.alert(
                                       "ERROR",
                                       "Failed to delete the related product. Contact your IT team."
                                    );
                                 },
                              });
                           }
                        },
                        )
                     }
                  }
               ],


            },
         ];

         const mainGridColumns = [
            {
               header: "ID",
               sortable: true,
               width: 80,
               dataIndex: "Sid",
               align: 'center'
            },
            {
               header: "Tree",
               sortable: true,
               width: 100,
               dataIndex: "Tree",
               align: 'center'
            },
            {
               header: "Key",
               sortable: false,
               width: 150,
               dataIndex: "Key",
               align: 'center'
            },
            {
               header: "Title",
               sortable: false,
               width: 300,
               dataIndex: "Title",
            },

         ];

         const tbarItems = [
            {
               xtype: "toolbar",
               dock: "top",
               id: "bottomToolBar",
               items: [
                  {
                     xtype: "button",
                     id: "add",
                     iconCls: "fa fa-plus-circle",
                     text: "New",
                     scale: "small",
                     handler: function () {
                        Ext.getCmp('tabTrans').setActiveTab(0)
                        Ext.getCmp("addSave").setHidden(false);
                        Ext.getCmp("editSave").setHidden(true);
                        Ext.getCmp("panelAdd").setTitle("Add series");
                        Ext.getCmp("viewport").setActiveItem("panelAdd");
                     },
                  },
                  "-",
                  {
                     xtype: "button",
                     id: "overviewEdit",
                     text: "Edit",
                     iconCls: "fa fa-edit",
                     scale: "small",
                     handler: function () {
                        edit = true;
                        const selectedRecord = Ext.getCmp("SeriesGrid")
                           .getSelectionModel()
                           .getSelection()[0];

                        if (selectedRecord === undefined) {
                           Ext.Msg.alert("INFO", "No record selected");
                        } else {
                           Ext.getCmp('tabTrans').setActiveTab(0)
                           Ext.getCmp("addSave").setHidden(true);
                           Ext.getCmp("editSave").setHidden(false);
                           Ext.getCmp("panelAdd").setTitle("Edit Serie");
                           Ext.getCmp("viewport").setActiveItem("panelAdd");
                           getSerieDetails(selectedRecord.data.Sid);
                           serieIDGlobal = selectedRecord.data.Sid;
                           getOtherLanguageDetail('fr', serieIDGlobal)
                           getOtherLanguageDetail('de', serieIDGlobal)
                           getOtherLanguageDetail('sp', serieIDGlobal)
                           getOtherLanguageDetail('ru', serieIDGlobal)
                        }
                     },
                  },
                  "-",
                  {
                     xtype: "button",
                     id: "delete",
                     text: "Delete",
                     iconCls: "fa fa-trash-alt",
                     scale: "small",
                     handler: function () { deleteSeries() },
                  },

               ],
            },
            {
               xtype: "toolbar",
               dock: "top",
               id: "searchBar",
               items: [
                  {
                     xtype: "textfield",
                     id: "searchKey",
                     iconCls: "fa fa-search",
                     width: 200,
                     labelWidth: 20,
                     style: "margin-left: 5px; color: grey;",
                     emptyText: "Search by key",
                     listeners: {
                        change: () => {
                           searchSerie("searchKey")
                        },
                     },
                  },

                  {
                     xtype: "button",
                     id: "resetSearch",
                     iconCls: "fas fa-undo-alt",
                     text: "reset",
                     style: "padding: 7px; border: none; background-color: #000",
                     listeners: {
                        click: () => {
                           Ext.getCmp("searchKey").setValue("");
                           mainStore.reload();
                        },
                     },
                  },
               ],
            },
         ];

         var TabTranslations = Ext.create('Ext.TabPanel', {
            fullscreen: true,
            tabBarPosition: 'bottom',
            id: 'tabTrans',
            width: "100%",
            defaults: {
               styleHtmlContent: true
            },

            items: [
               {
                  title: 'English',
                  items: [
                     {
                        xtype: "fieldset",
                        title: "English Translations",
                        anchor: "100%",
                        hidden: false,
                        id: "ENFIELD",
                        layoutConfig: {
                           // The total column count must be specified here
                           columns: 9,
                        },
                        items: [
                           {
                              layout: {
                                 type: 'hbox',
                                 align: 'stretch'
                              },
                              border: false,
                              items: [
                                 {
                                    xtype: 'my-form',
                                    width: '40%',
                                    frame: false,
                                    border: false,
                                    items: [
                                       {
                                          xtype: "textfield",
                                          id: "Title",
                                          name: "Title",
                                          fieldLabel: "Title",
                                          maxLenght: 46,
                                          width: 500,
                                          allowBlank: false,
                                          submitvalue: true,
                                          margin: "25 0 25 0",
                                       },

                                       {
                                          xtype: "htmleditor",
                                          id: "FDesc",
                                          name: "FDesc",
                                          fieldLabel: "Full description",
                                          enableColors: true,
                                          enableAlignments: false,
                                          submitvalue: true,
                                          allowBlank: false,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                       },
                                    ]
                                 },
                                 {
                                    xtype: 'my-form',
                                    border: false,
                                    width: '55%',
                                    frame: false,
                                    items: [
                                       {
                                          xtype: "htmleditor",
                                          id: "spec",
                                          name: "spec",
                                          fieldLabel: "Specification",
                                          enableColors: true,
                                          enableAlignments: false,
                                          allowBlank: false,
                                          selectOnFocus: false,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                          margin: "25 0 25 0",
                                       },
                                    ]
                                 }
                              ]
                           },
                        ],
                     },
                  ]
               },
               {
                  title: 'French',

                  items: [
                     {
                        xtype: "fieldset",
                        title: "French Translations",
                        anchor: "100%",
                        hidden: false,
                        id: "FRFIELD",
                        layoutConfig: {
                           // The total column count must be specified here
                           columns: 9,
                        },
                        items: [
                           {
                              layout: {
                                 type: 'hbox',
                                 align: 'stretch'
                              },
                              border: false,
                              items: [
                                 {
                                    xtype: 'my-form',
                                    width: '40%',
                                    frame: false,
                                    border: false,
                                    items: [
                                       {
                                          xtype: "textfield",
                                          id: "FRTitle",
                                          name: "FRTitle",
                                          fieldLabel: "Title",
                                          maxLenght: 46,
                                          width: 500,
                                          allowBlank: true,
                                          submitvalue: true,
                                          margin: "25 0 25 0",
                                       },

                                       {
                                          xtype: "htmleditor",
                                          id: "FRFDesc",
                                          name: "FRFDesc",
                                          fieldLabel: "Full description",
                                          allowBlank: true,
                                          enableColors: true,
                                          enableAlignments: false,
                                          submitvalue: true,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                       },
                                    ]
                                 },
                                 {
                                    xtype: 'my-form',
                                    width: '40%',
                                    frame: false,
                                    border: false,
                                    items: [
                                       {
                                          xtype: "htmleditor",
                                          id: "FRspec",
                                          name: "FRspec",
                                          fieldLabel: "Specification",
                                          enableColors: true,
                                          enableAlignments: false,
                                          allowBlank: true,
                                          selectOnFocus: false,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                          margin: "25 0 25 0",
                                       },
                                    ]
                                 }
                              ]
                           },
                        ],
                     },
                  ]
               },
               {
                  title: 'German',

                  items: [
                     {
                        xtype: "fieldset",
                        title: "German Translations",
                        anchor: "100%",
                        hidden: false,
                        id: "DEFIELD",
                        layoutConfig: {
                           // The total column count must be specified here
                           columns: 9,
                        },
                        items: [
                           {
                              layout: {
                                 type: 'hbox',
                                 align: 'stretch'
                              },
                              border: false,
                              items: [
                                 {
                                    xtype: 'my-form',
                                    width: '40%',
                                    frame: false,
                                    border: false,
                                    items: [
                                       {
                                          xtype: "textfield",
                                          id: "DETitle",
                                          name: "DETitle",
                                          fieldLabel: "Title",
                                          maxLenght: 46,
                                          width: 500,
                                          allowBlank: true,
                                          submitvalue: true,
                                          margin: "25 0 25 0",
                                       },

                                       {
                                          xtype: "htmleditor",
                                          id: "DEFDesc",
                                          name: "DEFDesc",
                                          fieldLabel: "Full description",
                                          enableColors: true,
                                          enableAlignments: false,
                                          submitvalue: true,
                                          allowBlank: true,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                       },
                                    ]
                                 },
                                 {
                                    xtype: 'my-form',
                                    width: '40%',
                                    frame: false,
                                    border: false,
                                    items: [
                                       {
                                          xtype: "htmleditor",
                                          id: "DEspec",
                                          name: "DEspec",
                                          fieldLabel: "Specification",
                                          enableColors: true,
                                          enableAlignments: false,
                                          allowBlank: true,
                                          selectOnFocus: false,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                          margin: "25 0 25 0",
                                       },
                                    ]
                                 }
                              ]
                           },
                        ],
                     },
                  ]
               },
               {
                  title: 'Spanish',

                  items: [
                     {
                        xtype: "fieldset",
                        labelStyle: "font-weight: bold; ",
                        title: "Spanish Translations",
                        anchor: "100%",
                        hidden: false,
                        id: "SPFIELD",
                        layoutConfig: {
                           // The total column count must be specified here
                           columns: 9,
                        },
                        items: [
                           {
                              layout: {
                                 type: 'hbox',
                                 align: 'stretch'
                              },
                              border: false,
                              items: [
                                 {
                                    xtype: 'my-form',
                                    width: '40%',
                                    frame: false,
                                    border: false,
                                    items: [
                                       {
                                          xtype: "textfield",
                                          id: "SPTitle",
                                          name: "SPTitle",
                                          fieldLabel: "Title",
                                          allowBlank: true,
                                          maxLenght: 46,
                                          width: 500,
                                          submitvalue: true,
                                          margin: "25 0 25 0",
                                       },

                                       {
                                          xtype: "htmleditor",
                                          id: "SPFDesc",
                                          name: "SPFDesc",
                                          fieldLabel: "Full description",
                                          enableColors: true,
                                          enableAlignments: false,
                                          submitvalue: true,
                                          allowBlank: true,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                       },
                                    ]
                                 },
                                 {
                                    xtype: 'my-form',
                                    width: '40%',
                                    frame: false,
                                    border: false,
                                    items: [
                                       {
                                          xtype: "htmleditor",
                                          id: "SPspec",
                                          name: "SPspec",
                                          fieldLabel: "Specification",
                                          enableColors: true,
                                          enableAlignments: false,
                                          allowBlank: true,
                                          selectOnFocus: false,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                          margin: "25 0 25 0",
                                       },
                                    ]
                                 }
                              ]
                           },
                        ],
                     },
                  ]
               },
               {
                  title: 'Russian',

                  items: [
                     {
                        xtype: "fieldset",
                        title: "Russian Translations",
                        anchor: "100%",
                        hidden: false,
                        id: "RUFIELD",
                        layoutConfig: {
                           // The total column count must be specified here
                           columns: 9,
                        },
                        items: [
                           {
                              layout: {
                                 type: 'hbox',
                                 align: 'stretch'
                              },
                              border: false,
                              items: [
                                 {
                                    xtype: 'my-form',
                                    width: '40%',
                                    frame: false,
                                    border: false,
                                    items: [
                                       {
                                          xtype: "textfield",
                                          id: "RUTitle",
                                          name: "RUTitle",
                                          fieldLabel: "Title",
                                          maxLenght: 46,
                                          allowBlank: true,
                                          width: 500,
                                          submitvalue: true,
                                          margin: "25 0 25 0",
                                       },

                                       {
                                          xtype: "htmleditor",
                                          id: "RUFDesc",
                                          name: "RUFDesc",
                                          fieldLabel: "Full description",
                                          enableColors: true,
                                          enableAlignments: false,
                                          submitvalue: true,
                                          allowBlank: true,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                       },
                                    ]
                                 },
                                 {
                                    xtype: 'my-form',
                                    width: '40%',
                                    frame: false,
                                    border: false,
                                    items: [
                                       {
                                          xtype: "htmleditor",
                                          id: "RUspec",
                                          name: "RUspec",
                                          fieldLabel: "Specification",
                                          enableColors: true,
                                          enableAlignments: false,
                                          allowBlank: true,
                                          selectOnFocus: false,
                                          enableFont: false,
                                          height: 400,
                                          width: 560,
                                       },
                                    ]
                                 }
                              ]
                           },
                        ],
                     },
                  ]
               },
            ]
         });

         var itemsAdd = [

            {
               xtype: "textfield",
               id: "Key",
               name: "Key",
               fieldLabel: "Key",
               maxLenght: 26,
               width: 500,
               allowBlank: true,
               selectOnFocus: false,
               margin: "25 0 25 0",
            },

            TabTranslations


         ];

         var screenAdd = new Ext.FormPanel({
            frame: false,
            header: false,
            border: false,
            defaults: {
               labelAlign: "right",
               labelWidth: 105,
               listeners: {
                  specialkey: function (field, e) {
                     if (e.getKey() == e.ENTER) {
                        updateRec();
                     }
                     if (e.getKey() == e.ESC) {
                        Ext.getCmp("viewport").setActiveItem("SeriesGrid");
                     }
                  },
               },
            },
            width: '100%',
            waitMsgTarget: true,
            autoScroll: true,
            style: "padding: 3px 3px 3px 3px;",
            items: [
               {
                  layout: "column",
                  layoutConfig: {
                     columns: 2,
                  },
                  border: false,
                  items: [
                     {
                        xtype: 'my-form',
                        id: "addForm",
                        columnWidth: 1,
                        border: false,
                        items: itemsAdd,
                     },
                  ],
               },
            ],
         });

         // outer panel container to hold tbar and keypress definitions
         var panelAdd = new Ext.Panel({
            layout: "fit",
            id: "panelAdd",
            title: "Add product",
            header: true,
            items: [screenAdd],
            tbar: [
               {

                  text: "Save",
                  id: "addSave",
                  iconCls: "fas fa-save",
                  handler: function () {
                     if (Ext.getCmp('addForm').isValid()) {
                        addSerie();
                        Ext.getCmp("relatedProducts").removeAll();
                        Ext.getCmp("relatedAccessories").removeAll();
                        Ext.getCmp("relatedParts").removeAll();
                        Ext.getCmp('addForm').reset()
                     }
                  },
               },
               {
                  text: "Save",
                  id: "editSave",
                  iconCls: "fas fa-save",
                  handler: function () {
                     if (Ext.getCmp('addForm').isValid()) {
                        edit = false;
                        editSerie();
                        Ext.getCmp("relatedProducts").removeAll();
                        Ext.getCmp("relatedAccessories").removeAll();
                        Ext.getCmp("relatedParts").removeAll();
                        Ext.getCmp("addForm").reset();
                     }
                  },
               },
               "-",
               {
                  text: "Cancel",
                  tooltip: "Cancel",
                  id: 'cancel',
                  iconCls: "fas fa-undo",
                  handler: function () {
                     edit = false;
                     Ext.getCmp("relatedProducts").removeAll();
                     Ext.getCmp("relatedAccessories").removeAll();
                     Ext.getCmp("relatedParts").removeAll();
                     Ext.getCmp('addForm').reset();
                     Ext.getCmp("viewport").setActiveItem("SeriesGrid");
                  },
               },
            ],
         });

         const SeriesGrid = Ext.create("Ext.grid.GridPanel", {
            id: "SeriesGrid",
            flex: 1,
            scrollable: true,
            title: "All Series",
            trackOver: true,
            loadMask: true,
            store: mainStore,
            columns: mainGridColumns,
            enableColumnMove: false,
            sortable: true,
            frame: false,
            renderTo: Ext.getBody(),
            height: 690,
            dockedItems: [...tbarItems],
            listeners: {
               dblclick: {
                  element: "body",
                  fn: () => {
                     const selectedRecord = Ext.getCmp("SeriesGrid")
                        .getSelectionModel()
                        .getSelection()[0];
                     serieIDGlobal = selectedRecord.data.Sid;
                     sessionStorage.setItem('serieIDGlobal', serieIDGlobal)
                     getSerieDetails(selectedRecord.data.Sid);

                     linkedProductStore.getProxy().setExtraParam('serieId', selectedRecord.data.Sid);
                     linkedProductStore.load();

                     Ext.getCmp("viewport").setActiveItem("SerieDetails");

                     serieMasterStore.getProxy().setExtraParam('Sid', selectedRecord.data.Sid)
                     SeriesMasterSpecs.setTitle('Serie master specs - ' + selectedRecord.data.Key)
                  },
               },
            },
         });

         const serieDetailItems = [
            {
               xtype: "displayfield",
               id: "key",
               fieldLabel: "<b>Serie</b>",
               labelWidth: 150,
               fieldCls: "fieldClass",
            },
            {
               xtype: "displayfield",
               id: "title",
               labelWidth: 150,
               fieldLabel: "<b>Serie Title</b>",
               fieldCls: "fieldClass",
            },
            {
               xtype: "displayfield",
               id: "fullDescription",
               fieldLabel: "<b>Full Description</b>",
               labelWidth: 150,
               fieldCls: "fieldClass",
            },
            {
               xtype: "displayfield",
               id: "specification",
               fieldLabel: "<b>Specification</b>",
               labelWidth: 150,
               fieldCls: "fieldClass",
            },
         ]


         const productDetailItems = [
            {
               xtype: "displayfield",
               id: "productName",
               fieldLabel: "<b>Product</b>",
               labelWidth: 150,
               fieldCls: "fieldClass",
            },
            {
               xtype: "displayfield",
               id: "productCode",
               labelWidth: 150,
               fieldLabel: "<b>Product Code</b>",
               fieldCls: "fieldClass",
            },
            {
               xtype: "displayfield",
               id: "as400Code",
               fieldLabel: "<b>AS400CODE</b>",
               labelWidth: 150,
               fieldCls: "fieldClass",
            },
            {
               xtype: "displayfield",
               id: "as400Description",
               fieldLabel: "<b>AS/400 Description</b>",
               labelWidth: 150,
               fieldCls: "fieldClass",
            },
            {
               xtype: "displayfield",
               id: "fullDescription",
               fieldLabel: "<b>Full Description</b>",
               labelWidth: 150,
               fieldCls: "fieldClass",
            },
            {
               xtype: "displayfield",
               id: "specification",
               fieldLabel: "<b>Specification</b>",
               labelWidth: 150,
               fieldCls: "fieldClass",
            },
         ]

         const SerieDetails = Ext.create("Ext.panel.Panel", {
            id: "SerieDetails",
            title: "SERIE DETAILS",
            flex: 1,
            trackOver: true,
            loadMask: true,
            header: true,
            scrollable: true,
            layout: "border",
            items: [
               {
                  xtype: "container",
                  width: 420,
                  scrollable: true,
                  style: "background-color: white;",
                  region: "east",
                  layout: {
                     type: "vbox",
                     align: "stretch",
                  },
                  items: [
                     {
                        xtype: "panel",
                        title: "Related Products",
                        id: "relatedProducts",
                        dockedItems: [],
                     },
                     {
                        xtype: "panel",
                        title: "Related Accessories",
                        id: "relatedAccessories",
                        items: [],
                     },
                     {
                        xtype: "panel",
                        title: "Related Parts",
                        id: "relatedParts",
                        items: [],
                     },
                  ],
               },
               {
                  xtype: "panel",
                  title: "Serie Info",
                  region: "center",
                  scrollable: true,
                  style: "padding-left: 20px; background-color: white;",
                  id: "productInfoContainer",
                  layout: {
                     type: "vbox",
                     align: "stretch",
                  },
                  items: serieDetailItems
               },
            ],
            dockedItems: [
               {
                  xtype: "toolbar",
                  dock: "top",
                  id: "productDetailBar",
                  items: [
                     {
                        xtype: "button",
                        id: "cancel2",
                        text: "Back",
                        iconCls: "fa fa-undo-alt",
                        handler: function () {
                           edit = false;
                           Ext.getCmp("relatedProducts").removeAll();
                           Ext.getCmp("relatedAccessories").removeAll();
                           Ext.getCmp("relatedParts").removeAll();
                           Ext.getCmp("viewport").setActiveItem("SeriesGrid");
                        },
                     },
                     "-",
                     {
                        xtype: "button",
                        id: "editDetail",
                        text: "Edit",
                        iconCls: "fa fa-edit",
                        handler: function () {
                           edit = true;
                           Ext.getCmp("addSave").setHidden(true);
                           Ext.getCmp("editSave").setHidden(false);
                           Ext.getCmp('panelAdd').setTitle('Edit Serie');
                           Ext.getCmp("viewport").setActiveItem("panelAdd");
                           getSerieDetails(serieIDGlobal);
                           Ext.getCmp("relatedProducts").removeAll();
                           Ext.getCmp("relatedAccessories").removeAll();
                           Ext.getCmp("relatedParts").removeAll();
                        },
                     },
                     "-",
                     {
                        xtype: "button",
                        id: "addImageBtn",
                        text: "Add Image",
                        iconCls: "fa fa-plus",
                        handler: function () {
                           Ext.getCmp('viewport').setActiveItem('imagePanel');
                        },
                     },
                     "-",
                     {
                        xtype: "button",
                        id: "linkedProductsBtn",
                        text: "View Linked Products",
                        iconCls: "fa fa-tasks",
                        handler: function () {
                           getRelatedProductSerie(serieIDGlobal);
                           Ext.getCmp("viewport").setActiveItem("linkedProducts");
                        },
                     },
                     "-",
                     {
                        xtype: "button",
                        id: "addRelatedProducts2",
                        text: "Add Related Product",
                        iconCls: "fa fa-plus",
                        handler: function () {
                           //Ext.getCmp('fromViewSave').setHidden(false);
                           //Ext.getCmp('fromAddSave').setHidden(true);
                           Ext.getCmp("viewport").setActiveItem("panelAdd2");
                        },
                     },
                     "-",
                     {
                        xtype: "button",
                        id: "viewSerieMaster",
                        text: "View Serie Master specs",
                        iconCls: "fa fa-tasks",
                        handler: function () {


                           serieMasterStore.load();

                           Ext.getCmp("viewport").setActiveItem("SeriesMasterSpecs");

                        },
                     },
                  ],
               },
            ],
         });





         //<!-- ----------------------------------------------------------------------- -->
         //<!--                           Add related product                           -->
         //<!-- ----------------------------------------------------------------------- -->
         var addSeriesRelatedProd = function () {
            Ext.getBody().mask("Saving", "x-msg-loading");
            Ext.Ajax.request({
               url: "/api/addSeriesRelatedProduct",
               method: "POST",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  SeriesId: serieIDGlobal,
                  ProductId: Ext.getCmp("ProductDesc").getValue(),

               },
               success: function (response) {
                  // check for errors and display error message
                  var check = response.responseText;
                  if (check) {
                     var data = eval("(" + response.responseText + ")");
                     if (data.serverStatus == 2) {
                        Ext.getBody().unmask();
                        Ext.Msg.alert(
                           "Success",
                           "You have successfully add the related product"
                        );
                     } else {
                        // display error message
                        Ext.getBody().unmask();
                        Ext.Msg.alert(
                           "ERROR",
                           "Failed to add the related product. Contact your IT team."
                        );
                     }
                  }
               },
               failure: function (response) {
                  Ext.getBody().unmask();
                  Ext.Msg.alert(
                     "ERROR",
                     "Failed to add the related product. Contact your IT team."
                  );
               },
            });
         };


         const ProductDet = Ext.define("ProductDet", {
            extend: "Ext.data.Model",
            fields: ["CODE", "Id"],
         });

         const ProductDetStore = Ext.create("Ext.data.Store", {
            id: "ProductDetStore",
            autoLoad: true,
            model: ProductDet,
            proxy: {
               type: "ajax",
               method: "POST",
               url: "/api/getProductDet",
               noCache: true,
               reader: {
                  type: "json",
               },
               cors: true,
               useDefaultXhrHeader: false,
            },
         });


         const getRelatedCatalog = (ProductId) => {
            Ext.Ajax.request({
               url: "/api/getRelatedCatalog",
               method: "POST",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  ProductId: ProductId,
               },
               success: function (response) {
                  const res = JSON.parse(response.responseText);

                  Ext.getCmp("RPCatalog").setValue(res[0].Catalog);

               },
               failure: function (response) {
                  console.log("failed", response);
               },
            });
         };

         var itemsAddRelated = [
            {
               xtype: "combo",
               id: "ProductDesc",
               name: "ProductDesc",
               store: ProductDetStore,
               width: 300,
               fieldLabel: "Product",
               displayField: "CODE",
               valueField: "Id",
               anchor: "50%",
               allowBlank: false,
               selectOnFocus: false,
               anyMatch: true,
               queryMode: "local",
               listeners: {
                  select: function () {
                     let ProductId = this.getValue();
                     getRelatedCatalog(ProductId);
                  }
               }
            },
            {
               xtype: 'displayfield',
               id: 'Productcatalog',
               fieldLabel: "Product description",

            }
         ]

         var screenAddRelated = new Ext.FormPanel({
            frame: false,
            header: false,
            border: false,
            defaults: {
               labelAlign: "right",
               labelWidth: 105,
               listeners: {
                  specialkey: function (field, e) {
                     if (e.getKey() == e.ENTER) {
                        updateRec();
                     }
                     if (e.getKey() == e.ESC) {
                        Ext.getCmp("viewport").setActiveItem("SeriesGrid");
                     }
                  },
               },
            },
            width: 500,
            waitMsgTarget: true,
            autoScroll: true,
            style: "padding: 3px 3px 3px 3px;",
            items: [
               {
                  layout: "column",
                  layoutConfig: {
                     columns: 2,
                  },
                  border: false,
                  items: [
                     {
                        xtype: 'my-form',
                        id: "addForm2",
                        columnWidth: 0.9,
                        border: false,
                        items: itemsAddRelated,
                     },
                  ],
               },
            ],
         });

         var panelAddRelated = new Ext.Panel({
            layout: "fit",
            id: "panelAddRelated",
            title: "Add related product",
            header: true,
            items: [screenAddRelated],
            tbar: [
               {
                  text: "Back",
                  tooltip: "Back",
                  id: 'cancel3',
                  iconCls: "fas fa-undo",
                  handler: function () {
                     edit = false;
                     Ext.getCmp('addForm2').reset();

                     Ext.getCmp("viewport").setActiveItem("SerieDetails");
                  },
               },
               "-",
               {
                  text: "Save",
                  id: "addRelatedSave",
                  iconCls: "fas fa-save",
                  handler: function () {
                     addSeriesRelatedProd()
                     Ext.getCmp('addForm2').reset();
                     Ext.getCmp("viewport").setActiveItem("SerieDetails");
                  },
               },

            ],
         });

         const linkedProducts = Ext.create("Ext.grid.GridPanel", {
            id: "linkedProducts",
            flex: 1,
            scrollable: true,
            title: "Linked Products",
            trackOver: true,
            loadMask: true,
            store: linkedProductStore,
            columns: linkedProductColumns,
            enableColumnMove: false,
            sortable: true,
            frame: false,
            renderTo: Ext.getBody(),
            height: 690,
            dockedItems: [...linkedProductTbar],
            selModel: 'cellmodel',
            plugins: {
               ptype: 'cellediting',
               clicksToEdit: 1
            },
            // listeners: {
            //    dblclick: {
            //       element: "body",
            //       fn: () => {
            //          const selectedRecord = Ext.getCmp("linkedProducts")
            //             .getSelectionModel()
            //             .getSelection()[0];
            //          console.log(selectedRecord);
            //          serieSpecStore.getProxy().setExtraParam('serieLink', selectedRecord.data.SPLid)
            //          serieSpecStore.reload();
            //          Ext.getCmp("viewport").setActiveItem("SerieSpecs");
            //       },
            //    },
            // },
         });

         linkedProducts.on("edit", (editor, event) => { //cellediting
            let key = Object.keys(linkedProductStore.getModifiedRecords()[0].modified);
            let value = linkedProductStore.getModifiedRecords()[0].data[key]
            let SPLid = linkedProductStore.getModifiedRecords()[0].data['SPLid'];
            let GroupArray = key[0].split('-')

            let Group = GroupArray[0]
            let SubGroup = GroupArray[1]
            let SerieMasterId = linkedProductStore.getModifiedRecords()[0].data['SerieMasterId'];


            Ext.Ajax.request({
               url: "/api/updateSerieSpecs",
               method: "POST",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  key: key[0],
                  value: value,
                  SPLid: SPLid,
                  SerieMasterId: SerieMasterId,
                  Group: Group,
                  SubGroup: SubGroup
               },
               success: function (response) {

                  linkedProductStore.reload();
               },
               failure: function (response) {
                  Ext.getBody().unmask();
                  Ext.Msg.alert(
                     "ERROR",
                     "Failed to update Specification. Contact your IT team."
                  );
               },
            });
         })

         // const SerieSpecs = Ext.create("Ext.grid.GridPanel", {
         //    id: "SerieSpecs",
         //    flex: 1,
         //    scrollable: true,
         //    title: "Managing Serie Specs",
         //    trackOver: true,
         //    loadMask: true,
         //    store: serieSpecStore,
         //    columns: serieSpecColumn,
         //    enableColumnMove: false,
         //    selModel: 'cellmodel',
         //    plugins: {
         //       ptype: 'cellediting',
         //       clicksToEdit: 1
         //    },
         //    sortable: true,
         //    frame: false,
         //    renderTo: Ext.getBody(),
         //    height: 690,
         //    dockedItems: [
         //       {
         //          xtype: "toolbar",
         //          dock: "top",
         //          id: "toolBar",
         //          items: [
         //             {
         //                xtype: "button",
         //                id: "serieSpecBack",
         //                text: "Back",
         //                iconCls: "fa fa-undo-alt",
         //                scale: "small",
         //                handler: function () {
         //                   Ext.getCmp('viewport').setActiveItem('linkedProducts')
         //                },
         //             },
         //             "-",
         //             {
         //                xtype: "button",
         //                id: "specValueAdd",
         //                text: "Add Specs Value",
         //                iconCls: "fa fa-plus",
         //                scale: "small",
         //                handler: function () {
         //                   Ext.getCmp('viewport').setActiveItem('specValueAddPanel')
         //                },
         //             },
         //             "-",
         //             {
         //                xtype: "button",
         //                id: "serieSpecSave",
         //                text: "Save",
         //                iconCls: "fas fa-save",
         //                scale: "small",
         //                handler: function () {
         //                   let updatedRecords = serieSpecStore.getModifiedRecords();
         //                   if (updatedRecords.length === 0) {
         //                      Ext.Msg.alert("INFO", "You haven't made any changes");
         //                   } else {
         //                      saveSpecEdit(updatedRecords);
         //                   }
         //                },
         //             },
         //          ],
         //       },
         //    ],
         // });





         // <!-- ----------------------------------------------------------------------- -->
         // <!--                           GRID SERIES MASTER                            -->
         // <!-- ----------------------------------------------------------------------- -->

         const tbarItemsMaster = [
            {
               xtype: "toolbar",
               dock: "top",
               id: "bottomToolBarMaster",
               items: [
                  {
                     xtype: "button",
                     id: "MasterBack",
                     text: "Back",
                     iconCls: "fa fa-undo-alt",
                     scale: "small",
                     handler: function () {
                        Ext.getCmp('viewport').setActiveItem('SerieDetails')
                     },
                  },
                  '-',
                  {
                     xtype: "button",
                     id: "addNewSpecs",
                     text: "Add Serie Master Specs",
                     iconCls: "fa fa-plus",
                     handler: function () {
                        Ext.getCmp('viewport').setActiveItem('addSerieSpecs')

                     }
                  }
               ]
            }
         ]


         const ModelSerieMaster = Ext.define("Categories", {
            extend: "Ext.data.Model",
            fields: ["Id", "Key", "Group", "Sequence"],
         });
         const serieMasterStore = Ext.create("Ext.data.Store", {
            id: "serieMasterStore",
            autoLoad: false,
            model: ModelSerieMaster,

            proxy: {
               type: "ajax",
               method: "GET",
               url: "/api/getSerieMaster",
               noCache: true,
               reader: {
                  type: "json",

               },
               cors: true,
               useDefaultXhrHeader: false,
            },
            listeners: {
               beforeload: function (store) {

               },
            },
         });

         const serieMasterColumns = [
            {
               header: "Serie master ID",
               sortable: true,
               width: 150,
               dataIndex: "Id"
            },
            {
               header: "Key",
               sortable: true,
               width: 200,
               dataIndex: "Key",
            },
            {
               header: "Group",
               sortable: true,
               width: 150,
               dataIndex: "Group"
            },
            {
               header: "Sequence",
               sortable: true,
               width: 100,
               dataIndex: "Sequence",
               field: {
                  xtype: 'numberfield',
                  allowBlank: true,
                  decimalPrecision: 0,
                  minValue: 0,

                  onFocusLeave: function (e) {
                     var me = this

                     var selectedrecords = SeriesMasterSpecs.getSelectionModel().getSelection();
                     var teller = selectedrecords.length;
                     currentsubfileRecord = selectedrecords[0];
                     Ext.Ajax.request({

                        url: '/api/updateSequenceSMaster',
                        params: {
                           Id: currentsubfileRecord.data.Id,
                           Sequence: currentsubfileRecord.data.Sequence,

                        },
                        success: function (response) {

                           // check for errors and display error message
                           var check = response.responseText;
                           if (check) {
                              var data = eval("(" + response.responseText + ")");
                              if (data) {
                                 // Remember record id's to reselect records after update of the row
                                 var selectedrecords = SeriesMasterSpecs.getSelectionModel().getSelection();
                                 recordIds = [];
                                 selectedIdx = [];
                                 for (var i = 0, len = selectedrecords.length; i < len; i++) {
                                    recordIds[i] = selectedrecords[i].id;
                                    selectedIdx[i] = SeriesMasterSpecs.getStore().indexOfId(recordIds[i]);
                                 }
                                 // reload subfile			
                                 serieMasterStore.reload(
                                    // reselect records after update	
                                    {
                                       callback: function () {
                                          for (var i = 0, len = selectedIdx.length; i < len; i++) {
                                             SeriesMasterSpecs.getSelectionModel().select(selectedIdx[i]);
                                          }
                                       },
                                       scope: this
                                    }
                                 );
                                 // display subfile
                                 Ext.getCmp('viewport').layout.setActiveItem('SeriesMasterSpecs');
                              } else {
                                 // display error message
                                 f = Ext.getCmp(data.FLD);
                                 f.markInvalid(data.MSG);
                                 f.focus();
                              };
                              Ext.getBody().unmask();
                           };
                        },
                        failure: function (response) {
                           Ext.getBody().unmask();
                        }
                     });
                  }
               },
            },
         ]


         const SeriesMasterSpecs = Ext.create("Ext.grid.GridPanel", {
            id: "SeriesMasterSpecs",
            flex: 1,
            scrollable: true,
            title: "Serie master specs",
            trackOver: true,
            loadMask: true,
            store: serieMasterStore,
            columns: serieMasterColumns,
            enableColumnMove: false,
            sortable: true,
            frame: false,
            height: 690,
            selModel: 'cellmodel',
            plugins: {
               ptype: 'cellediting',
               clicksToEdit: 1
            },
            dockedItems: [...tbarItemsMaster],
            listeners: {
               dblclick: {
                  element: "body",
                  fn: () => {

                  },
               },
            },
         });


         const addSerieSpecs = Ext.create('Ext.panel.Panel', {
            id: "addSerieSpecs",
            layout: 'fit',
            title: 'Add New Specs',
            tbar: [
               {
                  xtype: "button",
                  text: "Back",
                  id: "addSpecBack",
                  iconCls: "fa fa-undo-alt",
                  handler: function () {
                     Ext.getCmp('addSpecForm').reset();
                     Ext.getCmp('viewport').setActiveItem('SeriesMasterSpecs');
                  }
               },
               '-',
               {
                  xtype: "button",
                  text: "Save",
                  id: "addSpecSave",
                  iconCls: "fa fa-save",
                  handler: function () {
                     addSerieMasterSpecs(serieIDGlobal);
                     Ext.getCmp('addSpecForm').reset();
                  }
               },

            ],
            items: [
               {
                  xtype: "form",
                  id: "addSpecForm",
                  frame: true,
                  border: false,
                  scrollable: true,
                  layout: "anchor",
                  defaults: {
                     anchor: "30%",
                  },
                  items: [
                     {
                        xtype: 'textfield',
                        id: 'specKey',
                        style: "margin: 10px 0px;",
                        fieldLabel: 'Key',
                     },
                     {
                        xtype: 'combo',
                        id: 'specGroup',
                        style: "margin: 10px 0px;",
                        fieldLabel: 'Group',
                        store: specGroupStore,
                        displayField: 'Group',
                        valueField: 'Group',
                        mode: 'local',
                        anyMatch: true
                     },
                     {
                        xtype: 'textfield',
                        id: 'specSubGroup',
                        style: "margin: 10px 0px;",
                        fieldLabel: 'Sub Group',
                     },
                  ],
               },
            ]
         })


         const specValueAddPanel = Ext.create('Ext.panel.Panel', {
            id: "specValueAddPanel",
            layout: 'fit',
            title: 'Add New Specs Value',
            tbar: [
               {
                  xtype: "button",
                  text: "Back",
                  id: "addSpecValueBack",
                  iconCls: "fa fa-undo-alt",
                  handler: function () {
                     Ext.getCmp('viewport').setActiveItem('SerieSpecs');
                     Ext.getCmp('addSpecValueForm').reset();
                  }
               },
               "-",
               {
                  xtype: "button",
                  text: "Save",
                  id: "addSpecValueSave",
                  iconCls: "fa fa-save",
                  handler: function () {
                     addSpecValue();
                     Ext.getCmp('addSpecValueForm').reset();
                  }
               },
            ],
            items: [
               {
                  xtype: "form",
                  id: "addSpecValueForm",
                  frame: true,
                  border: false,
                  scrollable: true,
                  layout: "anchor",
                  defaults: {
                     anchor: "30%",
                  },
                  items: [
                     {
                        xtype: 'textfield',
                        id: 'specValueKey',
                        style: "margin: 10px 0px;",
                        fieldLabel: 'Key',
                        allowBlank: false,
                     },
                     {
                        xtype: 'textfield',
                        id: 'specValueValue',
                        style: "margin: 10px 0px;",
                        fieldLabel: 'Value',
                        allowBlank: false,
                     },
                     {
                        xtype: 'combo',
                        id: 'specValueGroup',
                        style: "margin: 10px 0px;",
                        fieldLabel: 'Group',
                        store: specGroupStore,
                        displayField: 'Group',
                        valueField: 'Group',
                        mode: 'local',
                        anyMatch: true,
                        allowBlank: true,
                     },
                     {
                        xtype: 'textfield',
                        id: 'specValueSubGroup',
                        style: "margin: 10px 0px;",
                        fieldLabel: 'Sub Group',
                        allowBlank: true,
                     },
                  ],
               },
            ]
         })


         const imagePanel = Ext.create('Ext.panel.Panel', {
            id: "imagePanel",
            layout: 'fit',
            title: 'Upload image',
            items: [
               {
                  xtype: "form",
                  id: "imageForm",
                  frame: true,
                  border: false,
                  scrollable: true,
                  viewModel: {},
                  layout: "anchor",
                  defaults: {
                     anchor: "30%",
                  },
                  items: [
                     {
                        xtype: 'filefield',
                        accept: 'image/*',
                        id: 'image',
                        name: 'image',
                        fieldLabel: 'Select an Image',
                        style: "margin: 10px 0px;",
                        allowBlank: false
                     },
                     {
                        xtype: 'displayfield',
                        id: 'seriesIdImage',
                        name: 'seriesIdImage',
                        style: "margin: 10px 0px;",
                        hidden: true
                     },
                     {
                        xtype: 'textfield',
                        id: 'imageLabel',
                        name: 'imageLabel',
                        style: "margin: 10px 0px;",
                        fieldLabel: 'Label',
                        allowBlank: true
                     },
                  ],
               },
            ],
            tbar: [
               {
                  text: "Back",
                  id: "imageBack",
                  iconCls: "fas fa-undo",
                  handler: function () {
                     Ext.getCmp('viewport').setActiveItem('SerieDetails');
                  }
               },
               "-",
               {
                  text: "Upload",
                  id: "upload",
                  iconCls: "fas fa-save",
                  handler: function () {
                     var form = Ext.getCmp('imageForm')
                     if (form.isValid()) {
                        form.submit({
                           url: '/api/uploadSerieImage',
                           headers: { 'Content-Type': 'multipart/form-data' },
                           method: "POST",
                           waitMsg: 'Uploading your photo...',
                           params: {
                              SeriesId: Ext.getCmp('seriesIdImage').getValue(),
                              Label: Ext.getCmp('imageLabel').getValue(),
                           },
                           success: function (fp, object) {
                              form.reset();
                              Ext.Msg.alert('Success', 'Your photo "' + object.result.file + '" has been uploaded.');
                           },
                           failure: () => {
                              Ext.Msg.alert('Failed', "failed to upload image, please contact your IT Team");
                           }
                        });
                     } else {
                        Ext.Msg.alert("INFO", "Form is not valid!")
                     }
                  },
               },
            ]
         })


         // <!-- ------------------------- ADD RELATED PRODUCT ------------------------- -->

         var addRelatedProdFromView = function (globalProductID) {
            Ext.getBody().mask("Saving", "x-msg-loading");
            Ext.Ajax.request({
               url: "/api/addRelatedProductFromSeriesView",
               method: "POST",
               cors: true,
               useDefaultXhrHeader: false,
               params: {
                  Type: Ext.getCmp("Type").getValue(),
                  LinkedProductID: Ext.getCmp("ProductDesc").getValue(),
                  serieIDGlobal: serieIDGlobal,
                  Code: Ext.getCmp("ProductDesc").getRawValue(),
                  Catalog: Ext.getCmp("RPCatalog").getValue(),
               },
               success: function (response) {
                  // check for errors and display error message
                  var check = response.responseText;
                  if (check) {
                     var data = eval("(" + response.responseText + ")");
                     if (data.serverStatus == 2) {
                        Ext.getBody().unmask();
                        Ext.Msg.alert(
                           "Success",
                           "You have successfully add the related product"
                        );
                     } else {
                        // display error message
                        Ext.getBody().unmask();
                        Ext.Msg.alert(
                           "ERROR",
                           "Failed to add the related product. Contact your IT team."
                        );
                     }
                  }
               },
               failure: function (response) {
                  Ext.getBody().unmask();
                  Ext.Msg.alert(
                     "ERROR",
                     "Failed to add the related product. Contact your IT team."
                  );
               },
            });
         };

         var TypeStore = Ext.create("Ext.data.Store", {
            fields: ["TypeCode", "TypeName"],
            data: [
               { TypeCode: "P", TypeName: "Spare part" },
               { TypeCode: "A", TypeName: "Accessory" },
               { TypeCode: "R", TypeName: "Related product" },
            ],
            storeId: "TypeStore",
         });

         var itemsAdd2 = [
            {
               xtype: "combo",
               id: "Type",
               name: "Type",
               store: TypeStore,
               width: 500,
               fieldLabel: "Type",
               displayField: "TypeName",
               valueField: "TypeCode",
               anchor: "100%",
               allowBlank: false,
               selectOnFocus: false,
               editable: false,
            },
            {
               xtype: "combo",
               id: "ProductDesc",
               name: "ProductDesc",
               store: ProductDetStore,
               width: 500,
               fieldLabel: "Product",
               displayField: "CODE",
               valueField: "Id",
               anchor: "100%",
               allowBlank: false,
               selectOnFocus: false,
               anyMatch: true,
               queryMode: "local",
               listeners: {
                  change: function () {
                     let ProductId = this.getValue();
                     getRelatedCatalog(ProductId);
                  },
               },
            },
            {
               xtype: "textfield",
               id: "RPCatalog",
               name: "RPCatalog",
               width: 500,
               fieldLabel: "Product description",
               anchor: "100%",
               editable: false,
               hideTrigger: true,
               allowBlank: true,
               selectOnFocus: false,
            },
         ];

         var screenAdd2 = new Ext.FormPanel({
            frame: false,
            header: false,
            border: false,
            id: "screenAdd2",
            defaults: {
               labelAlign: "right",
               labelWidth: 105,
            },
            width: 1200,
            waitMsgTarget: true,
            autoScroll: true,
            style: "padding: 3px 3px 3px 3px;",
            items: [
               {
                  layout: "column",
                  layoutConfig: { columns: 2 },
                  border: false,
                  items: [
                     {
                        xtype: 'my-form',
                        id: "addForm2",
                        columnWidth: 0.9,
                        border: false,
                        items: itemsAdd2,
                     },
                  ],
               },
            ],
         });

         const resetForm2 = () => {
            Ext.getCmp('Type').setValue('');
            Ext.getCmp('ProductDesc').setValue('');
            Ext.getCmp('RPCatalog').setValue('');
         }
         // outer panel container to hold tbar and keypress definitions
         var panelAdd2 = new Ext.Panel({
            layout: "fit",
            id: "panelAdd2",
            title: "Add Related Product",
            header: true,
            items: [screenAdd2],
            tbar: [
            {
                  text: "Cancel",
                  tooltip: "Cancel",
                  iconCls: "fas fa-undo",
                  handler: function () {
                     resetForm2();
                     Ext.getCmp("addForm").reset();
                     Ext.getCmp("viewport").setActiveItem("SeriesGrid");
                     Ext.getCmp("relatedProducts").removeAll();
                     Ext.getCmp("relatedAccessories").removeAll();
                     Ext.getCmp("relatedParts").removeAll();
                  },
               },
               '-',
               
               {
                  text: "Save",
                  id: "fromViewSave",
                  iconCls: "fas fa-save",
                  handler: function () {
                     if (Ext.getCmp('addForm2').isValid()) {
                        addRelatedProdFromView();
                        resetForm2();
                        Ext.getCmp("relatedProducts").removeAll();
                        Ext.getCmp("relatedAccessories").removeAll();
                        Ext.getCmp("relatedParts").removeAll();
                        Ext.getCmp("viewport").setActiveItem("SeriesGrid");
                     }
                  },
               },
               
            ],
         });


         


         let userRights = JSON.parse(localStorage.getItem('userRights'));

         if (userRights !== null) {
            applyUserRights(userRights);
         }

         //=========================================================================================================
         //		           VIEW PORT
         // ========================================================================================================

         Ext.create("Ext.container.Viewport", {
            id: "viewport",
            layout: "card",
            activeItem: 'SeriesGrid',
            items: [SeriesGrid, SerieDetails, panelAdd, panelAdd2, panelAddRelated, linkedProducts, addSerieSpecs, SeriesMasterSpecs, specValueAddPanel, imagePanel],
         });
      });
   </script>
</head>

<body>
   <div id="small-view">
      This Appplication is not meant for small devices.
   </div>
</body>

</html>