<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ITE BACK OFFICE MANAGEMENT</title>
  <link rel="stylesheet" type="text/css"
    href="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-neptune/resources/theme-neptune-all.css" />
  <script src="https://kit.fontawesome.com/ade53cd309.js" crossorigin="anonymous"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"></script>
  <style>
    .grid-image {
      width: auto;
      height: 70px;
    }

    .x-grid-cell-inner {
      overflow: hidden;
      padding: 10px 6px;
      white-space: nowrap;
    }

    .a span {
      background-color: rgb(253, 253, 253);
      padding: 2px;
      color: black;
    }

    .fieldClass {
      border-bottom: 1px dashed rgb(173, 173, 173);
      padding: 7px 0px;
    }
  </style>
  <script type="text/javascript">
    //=========================================================================================================
    //		           APPLICATION START
    // ========================================================================================================
    Ext.onReady(() => {
      let productObj = {};
      let edit = false;
      let PI = '';
      const relatedProducts = (products) => {
        if (products[0].Code !== null) {
          return products.map(product => {
            return {
              xtype: 'button',
              text: `${product.Description} [${product.Code}]`,
              cls: 'a',
              style: "border: none; margin: 2px 0px;",
              handler: () => {
                Ext.getCmp('relatedProductContainer').removeAll();
                getProductDetails(product.LinkedProductID);
                Ext.getCmp('productDetails').setTitle(`PRODUCT DETAILS - ${product.Code}`)
                Ext.getCmp('viewport').setActiveItem('productDetails');
              }
            }
          })
        } else {
          return [{
            xtype: 'displayfield',
            fieldLabel: '<b>Result</b>',
            value: '<b>No Related Products</b>',
            labelWidth: 44
          }]
        }
      }

      const getProductDetails = (productId) => {
        Ext.Ajax.request({
          url: "/api/getProductDetails",
          method: "GET",
          cors: true,
          useDefaultXhrHeader: false,
          params: {
            productId: productId
          },

          success: function (response) {
            const res = JSON.parse(response.responseText);

            console.log(res[0][0])

            if (edit === false) {
              displayProductInfo(res[0][0]);
            } else {
              getEditInfo(res[0][0]);
            }

            Ext.getCmp('relatedProductContainer').add(relatedProducts(res[1]))
          },
          failure: function (response) {
            console.log("failed", response);
          },
        });
      }

      const displayProductInfo = (product) => {
        Ext.getCmp('productName').setValue(product.Catalog);
        Ext.getCmp('productCode').setValue(product.CODE);
        Ext.getCmp('as400Code').setValue(product.As400Code);
        Ext.getCmp('description').setValue(product.Description);
        Ext.getCmp('fullDescription').setValue(product.FullDescription ?? "No Full Description");
        Ext.getCmp('specification').setValue(product.Specification ?? "No Specification");
      }


      const getEditInfo = (product) => {
        Ext.getCmp('code').setValue(product.CODE);
        Ext.getCmp('As400').setValue(product.As400Code);
        Ext.getCmp('Category').setValue(product.CategoryId);
        Ext.getCmp('desc').setValue(product.Description);
        Ext.getCmp('Cat').setValue(product.Catalog);
        Ext.getCmp('FDesc').setValue(product.FullDescription);
        Ext.getCmp('spec').setValue(product.Specification);
        // Ext.getCmp('hasDet').setValue(product.)
        // Ext.getCmp('Pub').setValue('aaaaaaa')
      }


      const clearEditInfo = () => {
        Ext.getCmp('code').setValue('');
        Ext.getCmp('As400').setValue('');
        Ext.getCmp('Category').setValue('');
        Ext.getCmp('desc').setValue('');
        Ext.getCmp('spec').setValue('');
        Ext.getCmp('Cat').setValue('');
        Ext.getCmp('FDesc').setValue('');
      }

      const searchProduct = (searchField, searchTarget) => {
        let searchQuery = Ext.getCmp(searchField).getValue();
        Ext.Ajax.request({
          url: "/api/searchProduct",
          method: "POST",
          cors: true,
          useDefaultXhrHeader: false,

          params: {
            searchQuery: searchQuery,
            searchTarget: searchTarget
          },

          success: function (response) {
            const res = JSON.parse(response.responseText);

            res
              ?
              mainStore.setData(res) :
              console.log("no response received");
          },
          failure: function (response) {
            console.log("failed", response);
          },
        });
      };

      const Model = Ext.define("ALLPRODUCTS", {
        extend: "Ext.data.Model",
        fields: ["Id", "Catalog", "Description"],
      });

      const mainGridColumns = [{
        header: "Product ID",
        sortable: true,
        width: 80,
        dataIndex: "Id",
        align: "center",
      },
      {
        header: "Product Code",
        sortable: true,
        width: 130,
        dataIndex: "CODE",
        align: "center",
        renderer: (value) => {
          return `<b>${value}</b>`
        }
      },
      {
        header: "As400Code",
        sortable: true,
        width: 100,
        dataIndex: "As400Code",
        align: "center",

      },
      {
        header: "Product Name",
        sortable: true,
        width: 350,
        dataIndex: "Catalog",
      },
      {
        header: "Description",
        sortable: true,
        width: 500,
        dataIndex: "Description",
      },
      {
        header: "Count",
        sortable: true,
        width: 100,
        dataIndex: "Count",
        hidden: true,
      },


      ];
      const mainStore = Ext.create("Ext.data.Store", {
        id: "mainStore",
        autoLoad: true,
        model: Model,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getAllProducts",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "allProducts",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        },
        listeners: {
          beforeload: function (store) { },
        },
      });

      const firstCatModel = Ext.define("FIRSTCAT", {
        extend: "Ext.data.Model",
        fields: ["WorkingTitle", "Id"],
      });

      const firstCatStore = Ext.create("Ext.data.Store", {
        id: "firstCatStore",
        autoLoad: true,
        model: firstCatModel,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getFirstCat",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "firstCat",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        }
      });
      const secondCatStore = Ext.create("Ext.data.Store", {
        id: "secondCatStore",
        autoLoad: true,
        model: firstCatModel,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getSecondCat",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "secondCat",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        },
        listeners: {
          beforeload: function (store) { },
        },
      });


      const thirdCatStore = Ext.create("Ext.data.Store", {
        id: "thirdCatStore",
        autoLoad: true,
        model: firstCatModel,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getThirdCat",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "thirdCat",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        },
        listeners: {
          beforeload: function (store) { },
        },
      });

      const tbarItems = [{
        xtype: "toolbar",
        dock: "top",
        id: "bottomToolBar",
        items: [{
          xtype: 'button',
          id: "add",
          iconCls: "fa fa-plus-circle",
          text: 'New',
          scale: "small",
          handler: function () {
            mode = 'addRow';
            Ext.getCmp('panelAdd').setTitle('Add product');
            Ext.getCmp('viewport').setActiveItem("panelAdd");
          },
        },
          "-",
        {
          xtype: 'button',
          id: "edit",
          text: 'Edit',
          iconCls: "fa fa-edit",
          scale: "small",
          handler: function () {
            edit = true;
            const selectedRecord = Ext.getCmp("AllProductGrid").getSelectionModel().getSelection()[0];
            PI = selectedRecord.data.Id;
            Ext.getCmp('viewport').setActiveItem('panelAdd');
            getProductDetails(selectedRecord.data.Id);
          },
        },
          "-",
        {
          xtype: 'button',
          id: "delete",
          text: 'Delete',
          iconCls: "fa fa-trash-alt",
          scale: "small",
          handler: function () {

          },
        },
        ],
      },
      {
        xtype: "toolbar",
        dock: "top",
        id: "searchBar",
        items: [{
          xtype: 'textfield',
          id: "searchProductCode",
          iconCls: "fa fa-search",
          width: 200,
          labelWidth: 20,
          style: "margin-left: 5px; color: grey;",
          emptyText: "Search Product Code...",
          listeners: {
            change: () => {
              searchProduct('searchProductCode', 'productCode');
            }
          }
        },
        {
          xtype: 'textfield',
          id: "searchProductName",
          iconCls: "fa fa-search",
          width: 200,
          labelWidth: 20,
          style: "margin-left: 5px; color: grey;",
          emptyText: "Search Product Name...",
          listeners: {
            change: () => {
              searchProduct('searchProductName', 'productName');
            }
          }
        },
        {
          xtype: 'button',
          id: "resetSearch",
          iconCls: "fas fa-undo-alt",
          text: "reset",
          style: "padding: 7px; border: none; background-color: #000",
          listeners: {
            click: () => {
              Ext.getCmp('searchProductName').setValue("");
              Ext.getCmp('searchProductCode').setValue("");
              mainStore.reload();
            }
          }
        },
        ],
      },
      {
        xtype: "toolbar",
        dock: "top",
        id: "toptool",
        items: [{
          xtype: 'combobox',
          id: "category1",
          store: firstCatStore,
          width: 300,
          displayField: 'WorkingTitle',
          valueField: 'Id',
          forceSelection: false,
          editable: false,
          typeAhead: true,
          mode: 'local',
          triggerAction: 'all',
          listeners: {
            change: () => {
              Ext.getCmp('category2').setValue('')
              secondCatStore.getProxy().setExtraParam('firstCat', Ext.getCmp('category1').getValue());
              secondCatStore.reload()
            }
          }
        },
          "-",
        {
          xtype: 'combobox',
          id: "category2",
          width: 250,
          store: secondCatStore,
          displayField: 'WorkingTitle',
          valueField: 'Id',
          forceSelection: false,
          editable: false,
          typeAhead: true,
          mode: 'local',
          triggerAction: 'all',
          listeners: {
            change: () => {
              Ext.getCmp('category3').setValue('')
              thirdCatStore.getProxy().setExtraParam('secondCat', Ext.getCmp('category2').getValue());
              thirdCatStore.reload()
            }
          }
        },
          "-",
        {
          xtype: 'combobox',
          id: "category3",
          width: 250,
          store: thirdCatStore,
          displayField: 'WorkingTitle',
          valueField: 'Id',
          forceSelection: false,
          editable: false,
          typeAhead: true,
          mode: 'local',
          triggerAction: 'all',
          handler: function () {

          },
        },
        ],
      },
      ]

      const AllProductGrid = Ext.create("Ext.grid.GridPanel", {
        id: "AllProductGrid",
        flex: 1,
        scrollable: true,
        title: "All ITE Products",
        trackOver: true,
        loadMask: true,
        store: mainStore, // store
        columns: mainGridColumns, //columns
        enableColumnMove: false,
        sortable: true,
        frame: false,
        renderTo: Ext.getBody(),
        height: 690,
        dockedItems: [...tbarItems],
        listeners: {
          dblclick: {
            element: "body",
            fn: () => {
              const selectedRecord = Ext.getCmp("AllProductGrid").getSelectionModel().getSelection()[0];
              getProductDetails(selectedRecord.data.Id);

              Ext.getCmp('productDetails').setTitle(`PRODUCT DETAILS - ${selectedRecord.data.CODE}`)
              Ext.getCmp('viewport').setActiveItem('productDetails');
            }
          },
        },
      });

      const tree = Ext.create({
        xtype: 'treelist',
        store: {
          root: {
            expanded: true,
            children: [{
              text: 'All Products',
              leaf: true,
            },
            {
              text: 'Categories',
              expanded: true,
              // iconCls: 'x-fa fa-folder',
              // children: [{
              //   text: 'Category product 1',
              //   leaf: true,
              //   iconCls: 'x-fa fa-book'
              // }, {
              //   text: 'Category product 1',
              //   leaf: true,
              //   iconCls: 'x-fa fa-graduation-cap'
              // }]
            },
            {
              text: 'Series',
              leaf: true,
              iconCls: 'x-fa fa-usd',
              handler: () => {
                console.log('bitch')
              }
            }
            ]
          }
        },
        renderTo: Ext.getBody()
      });


      const sideBar = Ext.create('Ext.panel.Panel', {
        id: "sideBar",
        trackOver: true,
        title: 'Navigation',
        loadMask: true,
        header: true,
        width: 300,
        layout: "hbox",
        renderTo: Ext.getBody(),
        items: [{
          xtype: "container",
          width: "100%",
          layout: {
            type: "vbox",
            align: "stretch",
          },
          items: [tree],
        },],
      });

      const productDetails = Ext.create('Ext.panel.Panel', {
        id: "productDetails",
        title: 'PRODUCT DETAILS',
        flex: 1,
        trackOver: true,
        loadMask: true,
        header: true,
        scrollable: true,
        layout: 'border',
        items: [{
          xtype: "panel",
          width: 300,
          scrollable: true,
          title: 'Related Products',
          region: 'east',
          id: 'relatedProductContainer',
          layout: {
            type: "vbox",
            align: "stretch",
          },
          items: [],
        },
        {
          xtype: "panel",
          title: 'Product Info',
          region: 'center',
          scrollable: true,
          style: "padding-left: 20px; background-color: white;",
          id: 'productInfoContainer',
          layout: {
            type: "vbox",
            align: "stretch",
          },
          items: [{
            xtype: 'displayfield',
            id: 'productName',
            fieldLabel: '<b>Product</b>',
            labelWidth: 150,
            fieldCls: 'fieldClass'
          },
          {
            xtype: 'displayfield',
            id: 'productCode',
            labelWidth: 150,
            fieldLabel: '<b>Product Code</b>',
            fieldCls: 'fieldClass'
          },
          {
            xtype: 'displayfield',
            id: 'as400Code',
            fieldLabel: '<b>AS400CODE</b>',
            labelWidth: 150,
            fieldCls: 'fieldClass'
          },
          {
            xtype: 'displayfield',
            id: 'description',
            fieldLabel: '<b>Description</b>',
            labelWidth: 150,
            fieldCls: 'fieldClass'
          },
          {
            xtype: 'displayfield',
            id: 'fullDescription',
            fieldLabel: '<b>Full Description</b>',
            labelWidth: 150,
            fieldCls: 'fieldClass'
          },
          {
            xtype: 'displayfield',
            id: 'specification',
            fieldLabel: '<b>Specification</b>',
            labelWidth: 150,
            fieldCls: 'fieldClass'
          },
          ],
        },
        ],
        dockedItems: [{
          xtype: "toolbar",
          dock: "top",
          id: "productDetailBar",
          items: [{
            xtype: 'button',
            id: "cancel",
            text: 'Back',
            iconCls: "fa fa-undo-alt",
            handler: function () {
              edit = false;
              Ext.getCmp('relatedProductContainer').removeAll();
              Ext.getCmp('viewport').setActiveItem('mainPanel');
            },
          },
            "-",
          {
            xtype: 'button', //ongoing
            id: "editDetail",
            text: 'Edit',
            iconCls: "fa fa-edit",
            handler: function () {
              edit = true;
              const selectedRecord = Ext.getCmp("AllProductGrid").getSelectionModel().getSelection()[0];
              PI = selectedRecord.data.Id;
              Ext.getCmp('viewport').setActiveItem('panelAdd');
              getProductDetails(selectedRecord.data.Id);
            },
          },
          ],
        },]
      });

      const mainPanel = Ext.create('Ext.panel.Panel', {
        id: "mainPanel",
        title: 'ADMIN DASHDOARD',
        flex: 1,
        trackOver: true,
        loadMask: true,
        header: true,
        height: 600,
        renderTo: Ext.getBody(),
        items: [{
          xtype: "container",
          width: "100%",
          layout: {
            type: "hbox",
            align: "stretch",
          },
          items: [sideBar, AllProductGrid],
        },],
      });

      const CATEGORY = Ext.define("Categories", {
        extend: "Ext.data.Model",
        fields: ["Id", "Name"],
      });


      const CategoryStore = Ext.create("Ext.data.Store", {
        id: "CategoryStore",
        autoLoad: true,
        model: CATEGORY,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getCategories",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "allProducts",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        }
      });

      var itemsAdd = [{
        xtype: 'textfield',
        id: 'code',
        name: 'code',
        fieldLabel: 'Code',
        maxLenght: 10,
        width: 500,
        allowBlank: true,
        selectOnFocus: false,

      },
      {
        xtype: 'textfield',
        id: 'As400',
        name: 'As400',
        fieldLabel: 'As400',
        maxLenght: 10,
        width: 500,
        allowBlank: true,
        selectOnFocus: false,
      },
      {
        xtype: 'combo',
        id: 'Category',
        name: 'Category',
        store: CategoryStore,
        width: 500,
        fieldLabel: 'Category',
        displayField: 'Name',
        valueField: 'Id',
        anchor: '100%',
        allowBlank: false,
        selectOnFocus: false,
      },
        // {
        //   xtype: 'textfield',
        //   id: 'Slug',
        //   name: 'Slug',
        //   fieldLabel: 'Slug',
        //   maxLenght: 10,
        //   width: 500,
        //   allowBlank: false,
        //   selectOnFocus: false,

        // },
        // {
        //   xtype: 'checkbox',
        //   id: 'hasDet',
        //   name: 'hasDet',
        //   fieldLabel: 'Has details',
        //   maxLenght: 10,
        //   width: 500,
        //   allowBlank: true,
        //   selectOnFocus: false,

        // },
        // {
        //   xtype: 'checkbox',
        //   id: 'Pub',
        //   name: 'Pub',
        //   fieldLabel: 'Publish',
        //   width: 500,
        //   allowBlank: true,
        //   selectOnFocus: false,
        // },
      ];
      // spareparts, accessory, related product, categry, id+display( search), english field needed, html edit box 
      // Hide cancel button 
      // remove slug, offline : checkbox, remove cancel (add back button) + first form data-> sessionstorage
      var screenAdd = new Ext.FormPanel({
        frame: false,
        header: false,
        border: false,
        defaults: {
          labelAlign: 'right',
          labelWidth: 105,
          listeners: {
            specialkey: function (field, e) {
              if (e.getKey() == e.ENTER) {
                updateRec();
              }
              if (e.getKey() == e.ESC) {
                Ext.getCmp('viewport').setActiveItem('mainPanel');
              }
            }
          }
        },
        width: 1200,
        waitMsgTarget: true,
        autoScroll: true,
        style: 'padding: 3px 3px 3px 3px;',
        items: [{
          layout: 'column',
          layoutConfig: {
            columns: 2
          },
          border: false,
          items: [{
            id: 'addForm',
            columnWidth: 0.90,
            border: false,
            items: itemsAdd
          }]
        }]

      });

      // outer panel container to hold tbar and keypress definitions
      var panelAdd = new Ext.Panel({
        layout: 'fit',
        id: 'panelAdd',
        title: 'Add product',
        header: true,
        items: [screenAdd],
        tbar: [{
          text: 'Next',
          id: 'save',
          iconCls: 'fas fa-save',
          handler: function () {
            Ext.getCmp('viewport').setActiveItem('panelAdd2');
          }
        },
          '-',
        {
          text: 'Cancel',
          tooltip: 'Cancel',
          iconCls: 'fas fa-undo',
          handler: function () {
            edit = false;
            clearEditInfo();
            Ext.getCmp('viewport').setActiveItem('mainPanel');
          }
        }
        ]
      });

      var itemsAdd2 = [
        {
          xtype: 'fieldset',
          title: 'English Translations',
          anchor: '100%',
          height: 500,
          hidden: false,
          id: 'ENFIELD',
          layout: {
            type: 'hbox',
            columns: 9,
            align: 'stretch'
          },
          layoutConfig: {
            // The total column count must be specified here
            columns: 9,
            rows: 10,
          },
          items: [
            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'desc',
                name: 'desc',
                fieldLabel: 'Description',
                maxLenght: 123,
                width: 500,
                allowBlank: false,
                selectOnFocus: false,
              },
              {
                xtype: 'htmleditor',
                id: 'spec',
                name: 'spec',
                height: 400,
                fieldLabel: 'Specification',
                enableColors: false,
                enableAlignments: false,
                allowBlank: false,
                selectOnFocus: false,
              },
              ]
            },
            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'Cat',
                name: 'Cat',
                fieldLabel: 'Product Name',
                maxLenght: 118,
                width: 500,
                submitvalue: true
              },

              {
                xtype: 'htmleditor',
                id: 'FDesc',
                name: 'FDesc',
                height: 400,
                fieldLabel: 'Full description',
                enableColors: false,
                enableAlignments: false,
                submitvalue: true,
              },
              ]
            }
          ]
        },
        {
          xtype: 'button',
          text: 'French translations',
          margin: 10,
          handler: function () {
            if (Ext.getCmp('FRFIELD').isHidden() == true) {
              Ext.getCmp('FRFIELD').setHidden(false)
            } else {
              Ext.getCmp('FRFIELD').setHidden(true)
            }

          },

        },
        {
          xtype: 'fieldset',
          title: 'French Translations',
          anchor: '100%',
          hidden: true,
          id: 'FRFIELD',
          layout: {
            type: 'hbox',
            columns: 9,
            align: 'stretch'
          },
          layoutConfig: {
            // The total column count must be specified here
            columns: 9
          },
          items: [


            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'FRdesc',
                name: 'FRdesc',
                fieldLabel: 'Description',
                maxLenght: 123,
                width: 500,
                allowBlank: true,
                selectOnFocus: false,

              },

              {
                xtype: 'htmleditor',
                id: 'FRspec',
                name: 'FRspec',
                fieldLabel: 'Specification',
                enableColors: false,
                enableAlignments: false,
                allowBlank: false,
                selectOnFocus: false,

              },


              ]
            },
            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'FRCat',
                name: 'FRCat',
                fieldLabel: 'Catalog',
                maxLenght: 118,
                width: 500,
                submitvalue: true
              },

              {
                xtype: 'htmleditor',
                id: 'FRFDesc',
                name: 'FRFDesc',
                fieldLabel: 'Full description',
                enableColors: false,
                enableAlignments: false,
                submitvalue: true,

              },

              ]
            }
          ]
        },
        {
          xtype: 'button',
          text: 'German translations',
          margin: 10,
          handler: function () {
            if (Ext.getCmp('GRFIELD').isHidden() == true) {
              Ext.getCmp('GRFIELD').setHidden(false)
            } else {
              Ext.getCmp('GRFIELD').setHidden(true)
            }

          },

        },
        {
          xtype: 'fieldset',
          title: 'German Translations',
          anchor: '100%',
          hidden: true,
          id: 'GRFIELD',
          layout: {
            type: 'hbox',
            columns: 9,
            align: 'stretch'
          },
          layoutConfig: {
            // The total column count must be specified here
            columns: 9
          },
          items: [


            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'GRdesc',
                name: 'GRdesc',
                fieldLabel: 'Description',
                maxLenght: 123,
                width: 500,
                allowBlank: false,
                selectOnFocus: false,

              },

              {
                xtype: 'htmleditor',
                id: 'GRspec',
                name: 'GRspec',
                fieldLabel: 'Specification',
                enableColors: false,
                enableAlignments: false,
                allowBlank: false,
                selectOnFocus: false,

              },


              ]
            },
            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'GRCat',
                name: 'GRCat',
                fieldLabel: 'Catalog',
                maxLenght: 118,
                width: 500,
                submitvalue: true
              },

              {
                xtype: 'htmleditor',
                id: 'GRFDesc',
                name: 'GRFDesc',
                fieldLabel: 'Full description',
                enableColors: false,
                enableAlignments: false,
                submitvalue: true,

              },

              ]
            }
          ]
        },
        {
          xtype: 'button',
          text: 'Spanish translations',
          margin: 10,
          handler: function () {
            if (Ext.getCmp('SPFIELD').isHidden() == true) {
              Ext.getCmp('SPFIELD').setHidden(false)
            } else {
              Ext.getCmp('SPFIELD').setHidden(true)
            }

          },

        },
        {
          xtype: 'fieldset',
          title: 'Spanish Translations',
          anchor: '100%',
          hidden: true,
          id: 'SPFIELD',
          layout: {
            type: 'hbox',
            columns: 9,
            align: 'stretch'
          },
          layoutConfig: {
            // The total column count must be specified here
            columns: 9
          },
          items: [


            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'SPdesc',
                name: 'SPdesc',
                fieldLabel: 'Description',
                maxLenght: 123,
                width: 500,
                allowBlank: false,
                selectOnFocus: false,

              },

              {
                xtype: 'htmleditor',
                id: 'SPspec',
                name: 'SPspec',
                fieldLabel: 'Specification',
                enableColors: false,
                enableAlignments: false,
                allowBlank: false,
                selectOnFocus: false,

              },


              ]
            },
            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'SPCat',
                name: 'SPCat',
                fieldLabel: 'Catalog',
                maxLenght: 118,
                width: 500,
                submitvalue: true
              },

              {
                xtype: 'htmleditor',
                id: 'SPFDesc',
                name: 'SPFDesc',
                fieldLabel: 'Full description',
                enableColors: false,
                enableAlignments: false,
                submitvalue: true,

              },

              ]
            }
          ]
        },
        {
          xtype: 'button',
          text: 'Russian translations',
          margin: 10,
          handler: function () {
            if (Ext.getCmp('RUFIELD').isHidden() == true) {
              Ext.getCmp('RUFIELD').setHidden(false)
            } else {
              Ext.getCmp('RUFIELD').setHidden(true)
            }

          },

        },
        {
          xtype: 'fieldset',
          title: 'Russian Translations',
          anchor: '100%',
          hidden: true,
          id: 'RUFIELD',
          layout: {
            type: 'hbox',
            columns: 9,
            align: 'stretch'
          },
          layoutConfig: {
            // The total column count must be specified here
            columns: 9
          },
          items: [
            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'RUdesc',
                name: 'RUdesc',
                fieldLabel: 'Description',
                maxLenght: 123,
                width: 500,
                allowBlank: false,
                selectOnFocus: false,

              },

              {
                xtype: 'htmleditor',
                id: 'RUspec',
                name: 'RUspec',
                fieldLabel: 'Specification',
                enableColors: false,
                enableAlignments: false,
                allowBlank: false,
                selectOnFocus: false,

              },
              ]
            },
            {
              xtype: 'container',
              style: 'margin-right: 10px ; margin-top: 5px ; margin-bottom: 5px',
              width: '49%',
              items: [{
                xtype: 'textfield',
                id: 'RUCat',
                name: 'RUCat',
                fieldLabel: 'Catalog',
                maxLenght: 118,
                width: 500,
                submitvalue: true
              },

              {
                xtype: 'htmleditor',
                id: 'RUFDesc',
                name: 'RUFDesc',
                fieldLabel: 'Full description',
                enableColors: false,
                enableAlignments: false,
                submitvalue: true,

              },

              ]
            }
          ]
        },
      ]
      var screenAdd2 = new Ext.FormPanel({
        frame: false,
        header: false,
        border: false,
        defaults: {
          labelAlign: 'right',
          labelWidth: 105,
          listeners: {
            specialkey: function (field, e) {
              if (e.getKey() == e.ENTER) {
                updateRec();
              }
              if (e.getKey() == e.ESC) {
                Ext.getCmp('viewport').setActiveItem('mainPanel');
              }
            }
          }
        },
        width: 1200,
        waitMsgTarget: true,
        autoScroll: true,
        style: 'padding: 3px 3px 3px 3px;',
        items: [{
          layout: 'column',
          layoutConfig: {
            columns: 2
          },
          border: false,
          items: [{

            id: 'addForm2',
            columnWidth: 0.90,
            border: false,
            items: itemsAdd2
          }]
        }]

      });

      // outer panel container to hold tbar and keypress definitions
      var panelAdd2 = new Ext.Panel({
        layout: 'fit',
        title: 'Add product details',
        header: true,
        id: 'panelAdd2',
        items: [screenAdd2],
        tbar: [{
          text: 'Save',
          id: 'save2',
          iconCls: 'fas fa-save',
          handler: () => {
            Ext.Ajax.request({
              url: "/api/editProduct",
              method: "POST",
              cors: true,
              useDefaultXhrHeader: false,
              params: {
                ProductId: PI,
                Specification: Ext.getCmp('spec').getValue(),
                FullDescription: Ext.getCmp('FDesc').getValue(),
                Description: Ext.getCmp('desc').getValue(),
                Catalog: Ext.getCmp('Cat').getValue(),
              },

              success: function (response) {
                const res = JSON.parse(response.responseText);
                mainStore.reload();
                Ext.Msg.alert('INFO!', `Product has been edited successfully`);
                Ext.getCmp('viewport').setActiveItem('mainPanel');

                edit = false;
              },
              failure: function (response) {
                console.log("failed", response);
              },
            });
          }
        },
          '-',
        {
          text: 'Cancel',
          tooltip: 'Cancel',
          iconCls: 'fas fa-undo',
          handler: function () {
            edit = false;
            Ext.getCmp('viewport').setActiveItem('mainPanel');
            // clearEditInfo();
          }
        }
        ]
      });


      //=========================================================================================================
      //		           VIEW PORT
      // ========================================================================================================

      Ext.create("Ext.container.Viewport", {
        id: "viewport",
        layout: "card",
        activeItem: 0,
        items: [mainPanel, productDetails, panelAdd, panelAdd2],
      });
    })
  </script>
</head>

<body></body>

</html>