<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ITE BACK OFFICE MANAGEMENT</title>
  <link rel="stylesheet" type="text/css"
    href="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-neptune/resources/theme-neptune-all.css" />
  <script src="https://kit.fontawesome.com/ade53cd309.js" crossorigin="anonymous"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"></script>
  <style>
    .grid-image {
      width: auto;
      height: 70px;
    }

    .x-grid-cell-inner {
      overflow: hidden;
      padding: 10px 6px;
      white-space: nowrap;
    }

    .a span {
      background-color: rgb(253, 253, 253);
      padding: 2px;
      color: black;
    }

    .fieldClass {
      border-bottom: 1px dashed rgb(173, 173, 173);
      padding: 7px 0px;
    }

    #ENFIELD-legendTitle,
    #SPFIELD-legendTitle,
    #FRFIELD-legendTitle,
    #DEFIELD-legendTitle,
    #RUFIELD-legendTitle {
      font-weight: bold;
    }
  </style>
  <script type="text/javascript">
    //=========================================================================================================
    //		           APPLICATION START
    // ========================================================================================================
    Ext.onReady(() => {
      
      let edit = false;
      let productIDGlobal = "";

      Ext.define('MyApp.view.Form', {
				extend: 'Ext.form.Panel',
				xtype: 'my-form',
				
			});

      const relatedProducts = (products) => {
        let exist = false;

        for (const prod of products) {
          if (prod.Type === "R") {
            exist = true;
          }
        }

        if (exist) {
          return products.map((product) => {
            if (product.Type === "R") {
              return {
                xtype: "button",
                text: `${product.Description} [${product.Code}]`,
                cls: "a",
                style: "border: none; margin: 2px 0px;",
                handler: () => {
                  Ext.getCmp("relatedProducts").removeAll();
                  Ext.getCmp("relatedAccessories").removeAll();
                  Ext.getCmp("relatedParts").removeAll();
                  getProductDetails(product.LinkedProductID);
                  productIDGlobal = product.LinkedProductID;
                  Ext.getCmp("productDetails").setTitle(
                    `PRODUCT DETAILS - ${product.Code}`
                  );
                  Ext.getCmp("viewport").setActiveItem("productDetails");
                },
              };
            }
          });
        } else {
          return [
            {
              xtype: "displayfield",
              fieldLabel: "<b>Result</b>",
              value: "No Related Products",
              labelWidth: 44,
            },
          ];
        }
      };

      const relatedAccessories = (products) => {
        let exist = false;

        for (const prod of products) {
          if (prod.Type === "A") {
            exist = true;
          }
        }
        if (exist) {
          return products.map((product) => {
            if (product.Type === "A") {
              return {
                xtype: "button",
                text: `${product.Description} [${product.Code}]`,
                cls: "a",
                style: "border: none; margin: 2px 0px;",
                handler: () => {
                  Ext.getCmp("relatedProducts").removeAll();
                  Ext.getCmp("relatedAccessories").removeAll();
                  Ext.getCmp("relatedParts").removeAll();
                  getProductDetails(product.LinkedProductID);
                  productIDGlobal = product.LinkedProductID;
                  Ext.getCmp("productDetails").setTitle(
                    `PRODUCT DETAILS - ${product.Code}`
                  );
                  Ext.getCmp("viewport").setActiveItem("productDetails");
                },
              };
            }
          });
        } else {
          return [
            {
              xtype: "displayfield",
              fieldLabel: "<b>Result</b>",
              value: "No Related Accessories",
              labelWidth: 44,
            },
          ];
        }
      };

      const relatedParts = (products) => {
        let exist = false;

        for (const prod of products) {
          if (prod.Type === "P") {
            exist = true;
          }
        }
        if (exist) {
          return products.map((product) => {
            if (product.Type === "P") {
              return {
                xtype: "button",
                text: `${product.Description} [${product.Code}]`,
                cls: "a",
                style: "border: none; margin: 2px 0px;",
                handler: () => {
                  Ext.getCmp("relatedProducts").removeAll();
                  Ext.getCmp("relatedAccessories").removeAll();
                  Ext.getCmp("relatedParts").removeAll();
                  getProductDetails(product.LinkedProductID);
                  productIDGlobal = product.LinkedProductID;
                  Ext.getCmp("productDetails").setTitle(
                    `PRODUCT DETAILS - ${product.Code}`
                  );
                  Ext.getCmp("viewport").setActiveItem("productDetails");
                },
              };
            }
          });
        } else {
          return [
            {
              xtype: "displayfield",
              fieldLabel: "<b>Result</b>",
              value: "No Related Parts",
              labelWidth: 44,
            },
          ];
        }
      };

      const getProductDetails = (productId) => {
        Ext.Ajax.request({
          url: "/api/getProductDetails",
          method: "GET",
          cors: true,
          useDefaultXhrHeader: false,
          params: {
            productId: productId,
          },

          success: function (response) {
            const res = JSON.parse(response.responseText);
            console.log(res);
            if (edit === false) {
              displayProductInfo(res[0][0]);
            } else {
              getEditInfo(res[0][0]);
            }

            Ext.getCmp("relatedProducts").add(relatedProducts(res[1]));
            Ext.getCmp("relatedAccessories").add(relatedAccessories(res[1]));
            Ext.getCmp("relatedParts").add(relatedParts(res[1]));
          },
          failure: function (response) {
            console.log("failed", response);
          },
        });
      };

      // const getAs400Description = (as400Code) => {
      //   Ext.Ajax.request({
      //     url: "/api/getAs400Description",



      //     method: "POST",
      //     cors: true,
      //     useDefaultXhrHeader: false,
      //     params: {
      //       as400Code: as400Code
      //     },
      //     success: function (response) {
      //       const res = JSON.parse(response.responseText);
      //       console.log(res);
      //       Ext.getCmp('as400Description').setValue(res[0].AOAROM || "As400 Description not available")
      //       Ext.getCmp("viewport").setActiveItem("mainPanel");
      //     },
      //     failure: function (response) {
      //       console.log("failed", response);
      //     },
      //   });
      // }

      const editProduct = () => {
        Ext.Ajax.request({
          url: "/api/editProduct",
          method: "POST",
          cors: true,
          useDefaultXhrHeader: false,
          params: {
            ProductId: productIDGlobal,
            Code: Ext.getCmp('code').getValue(),
            As400: Ext.getCmp('As400').getValue(),
            Category: Ext.getCmp('Category').getValue(),
            Pub: Ext.getCmp('Pub').getValue() === true ? 1 : 0,

            ModifiedOn: formatDate,
            Description: Ext.getCmp("desc").getValue().trim(),
            Specification: Ext.getCmp("spec").getValue(),
            Catalog: Ext.getCmp("Cat").getValue().trim(),
            FullDescription: Ext.getCmp("FDesc").getValue(),
            //FR
            FRLanguage: "fr",
            FRDescription: Ext.getCmp("FRdesc").getValue().trim(),
            FRSpecification: Ext.getCmp("FRspec").getValue(),
            FRCatalog: Ext.getCmp("FRCat").getValue().trim(),
            FRFullDescription: Ext.getCmp("FRFDesc").getValue(),
            //DE
            DELanguage: "de",
            DEDescription: Ext.getCmp("DEdesc").getValue().trim(),
            DESpecification: Ext.getCmp("DEspec").getValue(),
            DECatalog: Ext.getCmp("DECat").getValue().trim(),
            DEFullDescription: Ext.getCmp("DEFDesc").getValue(),
            //SP
            SPLanguage: "sp",
            SPDescription: Ext.getCmp("SPdesc").getValue().trim(),
            SPSpecification: Ext.getCmp("SPspec").getValue(),
            SPCatalog: Ext.getCmp("SPCat").getValue().trim(),
            SPFullDescription: Ext.getCmp("SPFDesc").getValue(),
            //RU
            RULanguage: "ru",
            RUDescription: Ext.getCmp("RUdesc").getValue().trim(),
            RUSpecification: Ext.getCmp("RUspec").getValue(),
            RUCatalog: Ext.getCmp("RUCat").getValue().trim(),
            RUFullDescription: Ext.getCmp("RUFDesc").getValue(),
          },
          success: function (response) {
            const res = JSON.parse(response.responseText);
            console.log(res);
            mainStore.reload();
            Ext.Msg.alert("INFO!", `Product has been edited successfully`);
            Ext.getCmp("viewport").setActiveItem("mainPanel");
          },
          failure: function (response) {
            console.log("failed", response);
          },
        });
      };

      const resetForm2 = () => {
        Ext.getCmp('Type').setValue('');
        Ext.getCmp('ProductDesc').setValue('');
        Ext.getCmp('RPCatalog').setValue('');
      }

      const getRelatedCatalog = (ProductId) => {
        Ext.Ajax.request({
          url: "/api/getRelatedCatalog",
          method: "POST",
          cors: true,
          useDefaultXhrHeader: false,
          params: {
            ProductId: ProductId,
          },
          success: function (response) {
            const res = JSON.parse(response.responseText);
            Ext.getCmp("RPCatalog").setValue(res[0].Catalog);
          },
          failure: function (response) {
            console.log("failed", response);
          },
        });
      };

      const displayProductInfo = (product) => {
        Ext.getCmp('Pub').setValue(product.Publish === 1 ? 'on' : '')
        Ext.getCmp("productName").setValue(product.Catalog);
        Ext.getCmp("productCode").setValue(product.CODE);
        Ext.getCmp("as400Code").setValue(product.As400Code);
        Ext.getCmp("as400Description").setValue(product.AOAROM);
        Ext.getCmp("fullDescription").setValue(
          product.FullDescription ?? "No Full Description"
        );
        Ext.getCmp("specification").setValue(
          product.Specification ?? "No Specification"
        );
      };

      const getEditInfo = (product) => {
        Ext.getCmp('Pub').setValue(product.Publish === 1 ? 'on' : '')
        Ext.getCmp("code").setValue(product.CODE);
        Ext.getCmp("As400").setValue(product.As400Code);
        Ext.getCmp("Category").setValue(product.CategoryId);
        Ext.getCmp("desc").setValue(product.Description);
        Ext.getCmp("Cat").setValue(product.Catalog);
        Ext.getCmp("FDesc").setValue(product.FullDescription);
        Ext.getCmp("spec").setValue(product.Specification);
      };

      const clearEditInfo = () => {
        Ext.getCmp("code").setValue("");
        Ext.getCmp("As400").setValue("");
        Ext.getCmp("Category").setValue("");
        Ext.getCmp("desc").setValue("");
        Ext.getCmp("spec").setValue("");
        Ext.getCmp("Cat").setValue("");
        Ext.getCmp("FDesc").setValue("");
      };

      var setProductSessionStorage = function () {
        sessionStorage.setItem("Code", Ext.getCmp("code").getValue());
        sessionStorage.setItem("As400", Ext.getCmp("As400").getValue());
        sessionStorage.setItem("Category", Ext.getCmp("Category").getValue());
        sessionStorage.setItem(
          "Pub",
          checkBoxFunction(Ext.getCmp("Pub").getValue())
        );
      };

      var checkBoxFunction = function (check) {
        if (check == true) {
          return 1;
        } else {
          return 0;
        }
      };

      var addRecord = function () {
        Ext.getBody().mask("Saving", "x-msg-loading");

        Ext.Ajax.request({
          url: "/api/addProduct",
          method: "POST",
          cors: true,
          useDefaultXhrHeader: false,
          params: {
            Code: sessionStorage.Code,
            As400: sessionStorage.As400,
            CreateOn: formatted_date,
            Category: sessionStorage.Category,
            Pub: sessionStorage.Pub,
            Slug: sessionStorage.Code.toLowerCase().replaceAll(" ", "-"),
            Language: "en",
            CreatedOn: formatDate,
            Description: Ext.getCmp("desc").getValue().trim(),
            Specification: Ext.getCmp("spec").getValue(),
            Catalog: Ext.getCmp("Cat").getValue().trim(),
            FullDescription: Ext.getCmp("FDesc").getValue(),
            //FR
            FRLanguage: "fr",
            FRDescription: Ext.getCmp("FRdesc").getValue().trim(),
            FRSpecification: Ext.getCmp("FRspec").getValue(),
            FRCatalog: Ext.getCmp("FRCat").getValue().trim(),
            FRFullDescription: Ext.getCmp("FRFDesc").getValue(),
            //DE
            DELanguage: "de",
            DEDescription: Ext.getCmp("DEdesc").getValue().trim(),
            DESpecification: Ext.getCmp("DEspec").getValue(),
            DECatalog: Ext.getCmp("DECat").getValue().trim(),
            DEFullDescription: Ext.getCmp("DEFDesc").getValue(),
            //SP
            SPLanguage: "sp",
            SPDescription: Ext.getCmp("SPdesc").getValue().trim(),
            SPSpecification: Ext.getCmp("SPspec").getValue(),
            SPCatalog: Ext.getCmp("SPCat").getValue().trim(),
            SPFullDescription: Ext.getCmp("SPFDesc").getValue(),
            //RU
            RULanguage: "ru",
            RUDescription: Ext.getCmp("RUdesc").getValue().trim(),
            RUSpecification: Ext.getCmp("RUspec").getValue(),
            RUCatalog: Ext.getCmp("RUCat").getValue().trim(),
            RUFullDescription: Ext.getCmp("RUFDesc").getValue(),
          },
          success: function (response) {
            // check for errors and display error message
            var check = response.responseText;
            if (check) {
              var data = JSON.parse(check);
              if (data) {
                Ext.getBody().unmask();
                Ext.Msg.confirm(
                  "Related product",
                  "Do you want to add related product?",
                  function (btn, text) {
                    if (btn === "yes") {
                      Ext.getCmp('fromViewSave').setHidden(true);
                      Ext.getCmp('fromAddSave').setHidden(false);
                      Ext.getCmp("viewport").setActiveItem("panelAdd2");
                    } else {
                      Ext.getCmp("viewport").setActiveItem('mainPanel');
                    }
                  }
                );
              } else {
                // display error message
                Ext.getBody().unmask();
                Ext.Msg.alert(
                  "ERROR",
                  "Failed to add the product. Contact your IT team."
                );
              }
            }
          },
          failure: function (response) {
            Ext.getBody().unmask();
            Ext.Msg.alert(
              "ERROR",
              "Failed to add the product. Contact your IT team."
            );
          },
        });
      };

      const getOtherLanguageDetail = (language, productId) => {
        Ext.Ajax.request({
          url: "/api/getOtherLanguageDetail",
          method: "POST",
          cors: true,
          useDefaultXhrHeader: false,
          params: {
            language: language,
            productId: productId,
          },
          success: function (response) {
            const res = JSON.parse(response.responseText);
            Ext.getCmp(`${language.toUpperCase()}Cat`).setValue(res[0].Catalog);
            Ext.getCmp(`${language.toUpperCase()}desc`).setValue(res[0].Description);
            Ext.getCmp(`${language.toUpperCase()}FDesc`).setValue(res[0].FullDescription);
            Ext.getCmp(`${language.toUpperCase()}spec`).setValue(res[0].Specification);
          },
          failure: function (response) {
            console.log("failed", response);
          },
        });
      }

      const searchProduct = (searchField, searchTarget) => {
        let searchQuery = Ext.getCmp(searchField).getValue();
        Ext.Ajax.request({
          url: "/api/searchProduct",
          method: "POST",
          cors: true,
          useDefaultXhrHeader: false,
          params: {
            searchQuery: searchQuery,
            searchTarget: searchTarget,
          },
          success: function (response) {
            const res = JSON.parse(response.responseText);

            res
              ? mainStore.setData(res)
              : console.log("no response received");
          },
          failure: function (response) {
            console.log("failed", response);
          },
        });
      };

      var TypeStore = Ext.create("Ext.data.Store", {
        fields: ["TypeCode", "TypeName"],
        data: [
          { TypeCode: "P", TypeName: "Spare part" },
          { TypeCode: "A", TypeName: "Accessory" },
          { TypeCode: "R", TypeName: "Related product" },
        ],
        storeId: "TypeStore",
      });

      const ProductDet = Ext.define("ProductDet", {
        extend: "Ext.data.Model",
        fields: ["CODE", "Id"],
      });

      const ProductDetStore = Ext.create("Ext.data.Store", {
        id: "ProductDetStore",
        autoLoad: true,
        model: ProductDet,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getProductDet",
          noCache: true,
          reader: {
            type: "json",
          },
          cors: true,
          useDefaultXhrHeader: false,
        },
      });

      var TypeStore = Ext.create("Ext.data.Store", {
        fields: ["TypeCode", "TypeName"],
        data: [
          { TypeCode: "P", TypeName: "Spare part" },
          { TypeCode: "A", TypeName: "Accessory" },
          { TypeCode: "R", TypeName: "Related product" },
        ],
        storeId: "TypeStore",
      });

      let current_datetime = new Date();
      var time = function () {
        if (current_datetime.getMonth() + 1 < 10) {
          return "0" + Number(current_datetime.getMonth() + 1);
        } else {
          current_datetime.getMonth() + 1;
        }
      };

      let formatted_date =
        current_datetime.getFullYear() +
        "-" +
        time() +
        "-" +
        current_datetime.getDate() +
        " " +
        current_datetime.getHours() +
        ":" +
        current_datetime.getMinutes() +
        ":" +
        current_datetime.getSeconds();

      let formatDate =
        current_datetime.getDate() +
        "/" +
        time() +
        "/" +
        current_datetime.getFullYear();

      const Model = Ext.define("ALLPRODUCTS", {
        extend: "Ext.data.Model",
        fields: ["Id", "Catalog", "Description", "CODE", "AOAROM"],
      });



      const mainGridColumns = [
        {
          header: "Product ID",
          sortable: true,
          width: 80,
          dataIndex: "Id",
          align: "center",
        },
        {
          header: "Product Code",
          sortable: true,
          width: 130,
          dataIndex: "CODE",
          align: "center",
          renderer: (value) => {
            return `<b>${value}</b>`;
          },
        },
        {
          header: "P/N",
          sortable: true,
          width: 100,
          dataIndex: "As400Code",
          align: "left",
        },
        {
          header: "Product Name",
          sortable: true,
          width: 350,
          dataIndex: "Catalog",
        },
        {
          header: "AS/400 Description",
          sortable: true,
          width: 600,
          dataIndex: "AOAROM",
        },
        {
          header: "Count",
          sortable: true,
          width: 100,
          dataIndex: "Count",
          hidden: true,
        },
      ];
      const mainStore = Ext.create("Ext.data.Store", {
        id: "mainStore",
        autoLoad: true,
        model: Model,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getAllProducts",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "allProducts",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        },
        listeners: {
          beforeload: function (store) { },
        },
      });

      const firstCatModel = Ext.define("FIRSTCAT", {
        extend: "Ext.data.Model",
        fields: ["WorkingTitle", "Id"],
      });

      const firstCatStore = Ext.create("Ext.data.Store", {
        id: "firstCatStore",
        autoLoad: true,
        model: firstCatModel,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getFirstCat",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "firstCat",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        },
      });
      const secondCatStore = Ext.create("Ext.data.Store", {
        id: "secondCatStore",
        autoLoad: true,
        model: firstCatModel,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getSecondCat",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "secondCat",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        },
        listeners: {
          beforeload: function (store) { },
        },
      });

      const thirdCatStore = Ext.create("Ext.data.Store", {
        id: "thirdCatStore",
        autoLoad: true,
        model: firstCatModel,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getThirdCat",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "thirdCat",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        },
        listeners: {
          beforeload: function (store) { },
        },
      });

      const tbarItems = [
        {
          xtype: "toolbar",
          dock: "top",
          id: "bottomToolBar",
          items: [
            {
              xtype: "button",
              id: "add",
              iconCls: "fa fa-plus-circle",
              text: "New",
              scale: "small",
              handler: function () {
                Ext.getCmp("addSave").setHidden(false);
                Ext.getCmp("editSave").setHidden(true);
                Ext.getCmp("panelAdd").setTitle("Add product");
                Ext.getCmp("viewport").setActiveItem("panelAdd");
              },
            },
            "-",
            {
              xtype: "button",
              id: "edit",
              text: "Edit",
              iconCls: "fa fa-edit",
              scale: "small",
              handler: function () {
                edit = true;
                const selectedRecord = Ext.getCmp("AllProductGrid")
                  .getSelectionModel()
                  .getSelection()[0];

                if (selectedRecord === undefined) {
                  Ext.Msg.alert("INFO", "No record selected");
                } else {
                  Ext.getCmp("addSave").setHidden(true);
                  Ext.getCmp("editSave").setHidden(false);
                  Ext.getCmp("panelAdd").setTitle("Edit Product");
                  Ext.getCmp("viewport").setActiveItem("panelAdd");
                  getProductDetails(selectedRecord.data.Id);
                  productIDGlobal = selectedRecord.data.Id;
                }
              },
            },
            "-",
            {
              xtype: "button",
              id: "delete",
              text: "Delete",
              iconCls: "fa fa-trash-alt",
              scale: "small",
              handler: function () { deleteProduct() },
            },
            "-",
            {
              xtype: 'button',
              id: "manageSequence",
              text: 'Manage Sequence',
              iconCls: "fa fa-tasks",
              scale: "small",
              handler: function () {
                window.open('/manage-sequence');
              },
            },
            "-",
            {
              xtype: 'button',
              id: "allSeries",
              text: 'Series Overview',
              iconCls: "fa fa-tasks",
              scale: "small",
              handler: function () {
                window.open('/series-overview');
              },
            },
          ],
        },
        {
          xtype: "toolbar",
          dock: "top",
          id: "searchBar",
          items: [
            {
              xtype: "textfield",
              id: "searchProductCode",
              iconCls: "fa fa-search",
              width: 200,
              labelWidth: 20,
              style: "margin-left: 5px; color: grey;",
              emptyText: "Search Product Code...",
              listeners: {
                change: () => {
                  searchProduct("searchProductCode", "productCode");
                },
              },
            },
            {
              xtype: "textfield",
              id: "searchProductName",
              iconCls: "fa fa-search",
              width: 200,
              labelWidth: 20,
              style: "margin-left: 5px; color: grey;",
              emptyText: "Search Product Name...",
              listeners: {
                change: () => {
                  searchProduct("searchProductName", "productName");
                },
              },
            },
            {
              xtype: "button",
              id: "resetSearch",
              iconCls: "fas fa-undo-alt",
              text: "reset",
              style: "padding: 7px; border: none; background-color: #000",
              listeners: {
                click: () => {
                  Ext.getCmp("searchProductName").setValue("");
                  Ext.getCmp("searchProductCode").setValue("");
                  mainStore.reload();
                },
              },
            },
          ],
        },
      ];

      const AllProductGrid = Ext.create("Ext.grid.GridPanel", {
        id: "AllProductGrid",
        flex: 1,
        scrollable: true,
        title: "All ITE Products",
        trackOver: true,
        loadMask: true,
        store: mainStore, // store
        columns: mainGridColumns, //columns
        enableColumnMove: false,
        sortable: true,
        frame: false,
        renderTo: Ext.getBody(),
        height: 690,
        dockedItems: [...tbarItems],
        listeners: {
          dblclick: {
            element: "body",
            fn: () => {
              const selectedRecord = Ext.getCmp("AllProductGrid")
                .getSelectionModel()
                .getSelection()[0];
              getProductDetails(selectedRecord.data.Id);
              // getAs400Description(selectedRecord.data.As400Code);
              productIDGlobal = selectedRecord.data.Id;
              Ext.getCmp("productDetails").setTitle(
                `PRODUCT DETAILS - ${selectedRecord.data.CODE}`
              );
              Ext.getCmp("viewport").setActiveItem("productDetails");
            },
          },
        },
      });

      const productDetails = Ext.create("Ext.panel.Panel", {
        id: "productDetails",
        title: "PRODUCT DETAILS",
        flex: 1,
        trackOver: true,
        loadMask: true,
        header: true,
        scrollable: true,
        layout: "border",
        items: [
          {
            xtype: "container",
            width: 300,
            scrollable: true,
            style: "background-color: white;",
            region: "east",
            layout: {
              type: "vbox",
              align: "stretch",
            },
            items: [
              {
                xtype: "panel",
                title: "Related Products",
                id: "relatedProducts",
                items: [],
              },
              {
                xtype: "panel",
                title: "Related Accessories",
                id: "relatedAccessories",
                items: [],
              },
              {
                xtype: "panel",
                title: "Related Parts",
                id: "relatedParts",
                items: [],
              },
            ],
          },
          {
            xtype: "panel",
            title: "Product Info",
            region: "center",
            scrollable: true,
            style: "padding-left: 20px; background-color: white;",
            id: "productInfoContainer",
            layout: {
              type: "vbox",
              align: "stretch",
            },
            items: [
              {
                xtype: "displayfield",
                id: "productName",
                fieldLabel: "<b>Product</b>",
                labelWidth: 150,
                fieldCls: "fieldClass",
              },
              {
                xtype: "displayfield",
                id: "productCode",
                labelWidth: 150,
                fieldLabel: "<b>Product Code</b>",
                fieldCls: "fieldClass",
              },
              {
                xtype: "displayfield",
                id: "as400Code",
                fieldLabel: "<b>AS400CODE</b>",
                labelWidth: 150,
                fieldCls: "fieldClass",
              },
              {
                xtype: "displayfield",
                id: "as400Description",
                fieldLabel: "<b>AS/400 Description</b>",
                labelWidth: 150,
                fieldCls: "fieldClass",
              },
              {
                xtype: "displayfield",
                id: "fullDescription",
                fieldLabel: "<b>Full Description</b>",
                labelWidth: 150,
                fieldCls: "fieldClass",
              },
              {
                xtype: "displayfield",
                id: "specification",
                fieldLabel: "<b>Specification</b>",
                labelWidth: 150,
                fieldCls: "fieldClass",
              },
            ],
          },
        ],
        dockedItems: [
          {
            xtype: "toolbar",
            dock: "top",
            id: "productDetailBar",
            items: [
              {
                xtype: "button",
                id: "cancel",
                text: "Back",
                iconCls: "fa fa-undo-alt",
                handler: function () {
                  edit = false;
                  Ext.getCmp("relatedProducts").removeAll();
                  Ext.getCmp("relatedAccessories").removeAll();
                  Ext.getCmp("relatedParts").removeAll();
                  Ext.getCmp("viewport").setActiveItem("mainPanel");
                },
              },
              "-",
              {
                xtype: "button", //ongoing
                id: "editDetail",
                text: "Edit",
                iconCls: "fa fa-edit",
                handler: function () {
                  edit = true;
                  Ext.getCmp("addSave").setHidden(true);
                  Ext.getCmp("editSave").setHidden(false);
                  Ext.getCmp('panelAdd').setTitle('Edit product');
                  Ext.getCmp("viewport").setActiveItem("panelAdd");
                  getProductDetails(productIDGlobal);
                },
              },
              "-",
              {
                xtype: "button", //ongoing
                id: "addRelatedProducts",
                text: "Add Related Product",
                iconCls: "fa fa-plus",
                handler: function () {
                  Ext.getCmp('fromViewSave').setHidden(false);
                  Ext.getCmp('fromAddSave').setHidden(true);
                  Ext.getCmp("viewport").setActiveItem("panelAdd2");
                },
              },
            ],
          },
        ],
      });

      const mainPanel = Ext.create("Ext.panel.Panel", {
        id: "mainPanel",
        title: "ADMIN DASHDOARD",
        flex: 1,
        trackOver: true,
        loadMask: true,
        header: true,
        height: 600,
        renderTo: Ext.getBody(),
        items: [
          {
            xtype: "container",
            width: "100%",
            layout: {
              type: "hbox",
              align: "stretch",
            },
            items: [AllProductGrid],
          },
        ],
      });

      const CATEGORY = Ext.define("Categories", {
        extend: "Ext.data.Model",
        fields: ["Id", "Name"],
      });

      const CategoryStore = Ext.create("Ext.data.Store", {
        id: "CategoryStore",
        autoLoad: true,
        model: CATEGORY,
        proxy: {
          type: "ajax",
          method: "POST",
          url: "/api/getCategories",
          noCache: true,
          reader: {
            type: "json",
            rootProperty: "allProducts",
            totalProperty: "totalCount",
          },
          cors: true,
          useDefaultXhrHeader: false,
        },
      });

      var itemsAdd = [
        {
          xtype: "textfield",
          id: "code",
          name: "code",
          fieldLabel: "Code",
          maxLenght: 10,
          width: 500,
          allowBlank: true,
          selectOnFocus: false,
        },
        {
          xtype: "textfield",
          id: "As400",
          name: "As400",
          fieldLabel: "P/N",
          maxLenght: 10,
          width: 500,
          allowBlank: true,
          selectOnFocus: false,
        },
        {
          xtype: "combo",
          id: "Category",
          name: "Category",
          store: CategoryStore,
          width: 500,
          fieldLabel: "Category",
          displayField: "Name",
          valueField: "Id",
          anchor: "100%",
          allowBlank: false,
          selectOnFocus: false,
          anyMatch: true,
          queryMode: "local",
        },
        {
          xtype: "checkbox",
          id: "Pub",
          name: "Pub",
          fieldLabel: "Publish",
          width: 500,
          allowBlank: true,
          selectOnFocus: false,
        },
        {
          xtype: "fieldset",
          title: "English Translations",
          anchor: "100%",
          hidden: false,
          id: "ENFIELD",
          layoutConfig: {
            // The total column count must be specified here
            columns: 9,
          },
          items: [
            {
              xtype: "textfield",
              id: "Cat",
              name: "Cat",
              fieldLabel: "Catalog",
              maxLenght: 118,
              width: 500,
              allowBlank: false,
              submitvalue: true,
              margin: "25 0 25 0",
            },
            {
              xtype: "textfield",
              id: "desc",
              name: "desc",
              fieldLabel: "Description",
              maxLenght: 123,
              width: 500,
              allowBlank: false,
              selectOnFocus: false,
              margin: "25 0 25 0",
            },
            {
              xtype: "htmleditor",
              id: "FDesc",
              name: "FDesc",
              fieldLabel: "Full description",
              enableColors: true,
              enableAlignments: false,
              submitvalue: true,
              allowBlank: false,
              enableFont: false,
            },
            // Baptiste move Catalog field
            {
              xtype: "htmleditor",
              id: "spec",
              name: "spec",
              fieldLabel: "Specification",
              enableColors: true,
              enableAlignments: false,
              allowBlank: false,
              selectOnFocus: false,
              enableFont: false,
            },
          ],
        },
        {
          xtype: "button",
          text: "French translations",
          margin: 10,
          handler: function () {
            if (Ext.getCmp("FRFIELD").isHidden() == true) {
              Ext.getCmp("FRFIELD").setHidden(false);
            } else {
              Ext.getCmp("FRFIELD").setHidden(true);
            }

            if (edit === true) {
              getOtherLanguageDetail('fr', productIDGlobal)
            }
          },
        },
        {
          xtype: "fieldset",
          title: "French Translations",
          anchor: "100%",
          hidden: true,
          id: "FRFIELD",
          layoutConfig: {
            // The total column count must be specified here
            columns: 9,
          },
          items: [
            {
              xtype: "textfield",
              id: "FRCat",
              name: "FRCat",
              fieldLabel: "Catalog",
              maxLenght: 118,
              width: 500,
              allowBlank: true,
              submitvalue: true,
              margin: "25 0 25 0",
            },
            {
              xtype: "textfield",
              id: "FRdesc",
              name: "FRdesc",
              fieldLabel: "Description",
              maxLenght: 123,
              width: 500,
              allowBlank: true,
              selectOnFocus: false,
              margin: "25 0 25 0",
            },
            {
              xtype: "htmleditor",
              id: "FRFDesc",
              name: "FRFDesc",
              fieldLabel: "Full description",
              allowBlank: true,
              enableColors: true,
              enableAlignments: false,
              submitvalue: true,
              enableFont: false,
            },
            {
              xtype: "htmleditor",
              id: "FRspec",
              name: "FRspec",
              fieldLabel: "Specification",
              enableColors: true,
              enableAlignments: false,
              allowBlank: true,
              selectOnFocus: false,
              enableFont: false,
            },
          ],
        },
        {
          xtype: "button",
          text: "German translations",
          margin: 10,
          handler: function () {
            if (Ext.getCmp("DEFIELD").isHidden() == true) {
              Ext.getCmp("DEFIELD").setHidden(false);
            } else {
              Ext.getCmp("DEFIELD").setHidden(true);
            }

            if (edit === true) {
              getOtherLanguageDetail('de', productIDGlobal)
            }
          },
        },
        {
          xtype: "fieldset",
          title: "German Translations",
          anchor: "100%",
          hidden: true,
          id: "DEFIELD",
          layoutConfig: {
            // The total column count must be specified here
            columns: 9,
          },
          items: [
            {
              xtype: "textfield",
              id: "DECat",
              name: "DECat",
              fieldLabel: "Catalog",
              maxLenght: 118,
              width: 500,
              allowBlank: true,
              submitvalue: true,
              margin: "25 0 25 0",
            },
            {
              xtype: "textfield",
              id: "DEdesc",
              name: "DEdesc",
              fieldLabel: "Description",
              maxLenght: 123,
              width: 500,
              allowBlank: true,
              selectOnFocus: false,
              margin: "25 0 25 0",
            },
            {
              xtype: "htmleditor",
              id: "DEFDesc",
              name: "DEFDesc",
              fieldLabel: "Full description",
              enableColors: true,
              enableAlignments: false,
              submitvalue: true,
              allowBlank: true,
              enableFont: false,
            },
            {
              xtype: "htmleditor",
              id: "DEspec",
              name: "DEspec",
              fieldLabel: "Specification",
              enableColors: true,
              enableAlignments: false,
              allowBlank: true,
              selectOnFocus: false,
              enableFont: false,
            },
          ],
        },
        {
          xtype: "button",
          text: "Spanish translations",
          margin: 10,
          handler: function () {
            if (Ext.getCmp("SPFIELD").isHidden() == true) {
              Ext.getCmp("SPFIELD").setHidden(false);
            } else {
              Ext.getCmp("SPFIELD").setHidden(true);
            }

            if (edit === true) {
              getOtherLanguageDetail('sp', productIDGlobal)
            }
          },
        },
        {
          xtype: "fieldset",
          labelStyle: "font-weight: bold; ",
          title: "Spanish Translations",
          anchor: "100%",
          hidden: true,
          id: "SPFIELD",
          layoutConfig: {
            // The total column count must be specified here
            columns: 9,
          },
          items: [
            {
              xtype: "textfield",
              id: "SPCat",
              name: "SPCat",
              fieldLabel: "Catalog",
              allowBlank: true,
              maxLenght: 118,
              width: 500,
              submitvalue: true,
              margin: "25 0 25 0",
            },
            {
              xtype: "textfield",
              id: "SPdesc",
              name: "SPdesc",
              fieldLabel: "Description",
              maxLenght: 123,
              width: 500,
              allowBlank: true,
              selectOnFocus: false,
              margin: "25 0 25 0",
            },
            {
              xtype: "htmleditor",
              id: "SPFDesc",
              name: "SPFDesc",
              fieldLabel: "Full description",
              enableColors: true,
              enableAlignments: false,
              submitvalue: true,
              allowBlank: true,
              enableFont: false,
            },
            {
              xtype: "htmleditor",
              id: "SPspec",
              name: "SPspec",
              fieldLabel: "Specification",
              enableColors: true,
              enableAlignments: false,
              allowBlank: true,
              selectOnFocus: false,
              enableFont: false,
            },
          ],
        },
        {
          xtype: "button",
          text: "Russian translations",
          margin: 10,
          handler: function () {
            if (Ext.getCmp("RUFIELD").isHidden() == true) {
              Ext.getCmp("RUFIELD").setHidden(false);
            } else {
              Ext.getCmp("RUFIELD").setHidden(true);
            }

            if (edit === true) {
              getOtherLanguageDetail('ru', productIDGlobal)
            }
          },
        },
        {
          xtype: "fieldset",
          title: "Russian Translations",
          anchor: "100%",
          hidden: true,
          id: "RUFIELD",
          layoutConfig: {
            // The total column count must be specified here
            columns: 9,
          },
          items: [
            {
              xtype: "textfield",
              id: "RUCat",
              name: "RUCat",
              fieldLabel: "Catalog",
              maxLenght: 118,
              allowBlank: true,
              width: 500,
              submitvalue: true,
              margin: "25 0 25 0",
            },
            {
              xtype: "textfield",
              id: "RUdesc",
              name: "RUdesc",
              fieldLabel: "Description",
              maxLenght: 123,
              width: 500,
              allowBlank: true,
              selectOnFocus: false,
              margin: "25 0 25 0",
            },
            {
              xtype: "htmleditor",
              id: "RUFDesc",
              name: "RUFDesc",
              fieldLabel: "Full description",
              enableColors: true,
              enableAlignments: false,
              submitvalue: true,
              allowBlank: true,
              enableFont: false,
            },
            {
              xtype: "htmleditor",
              id: "RUspec",
              name: "RUspec",
              fieldLabel: "Specification",
              enableColors: true,
              enableAlignments: false,
              allowBlank: true,
              selectOnFocus: false,
              enableFont: false,
            },
          ],
        },
      ];
      // spareparts, accessory, related product, categry, id+display( search), english field needed, html edit box
      // Hide cancel button
      // remove slug, offline : checkbox, remove cancel (add back button) + first form data-> sessionstorage
      var screenAdd = new Ext.FormPanel({
        frame: false,
        header: false,
        border: false,
        defaults: {
          labelAlign: "right",
          labelWidth: 105,
          listeners: {
            specialkey: function (field, e) {
              if (e.getKey() == e.ENTER) {
                updateRec();
              }
              if (e.getKey() == e.ESC) {
                Ext.getCmp("viewport").setActiveItem("mainPanel");
              }
            },
          },
        },
        width: 1200,
        waitMsgTarget: true,
        autoScroll: true,
        style: "padding: 3px 3px 3px 3px;",
        items: [
          {
            layout: "column",
            layoutConfig: {
              columns: 2,
            },
            border: false,
            items: [
              {
                xtype: 'my-form',
                id: "addForm",
                columnWidth: 0.9,
                border: false,
                items: itemsAdd,
              },
            ],
          },
        ],
      });

      // outer panel container to hold tbar and keypress definitions
      var panelAdd = new Ext.Panel({
        layout: "fit",
        id: "panelAdd",
        title: "Add product",
        header: true,
        items: [screenAdd],
        tbar: [
          {
            text: "Save",
            id: "addSave",
            iconCls: "fas fa-save",
            handler: function () {
              setProductSessionStorage();
              addRecord();
              Ext.getCmp("addForm").reset();
            },
          },
          {
            text: "Save",
            id: "editSave",
            iconCls: "fas fa-save",
            handler: function () {
              setProductSessionStorage();
              editProduct();
              Ext.getCmp("addForm").reset();
            },
          },
          "-",
          {
            text: "Cancel",
            tooltip: "Cancel",
            iconCls: "fas fa-undo",
            handler: function () {
              edit = false;
              clearEditInfo();
              Ext.getCmp("relatedProducts").removeAll();
              Ext.getCmp("relatedAccessories").removeAll();
              Ext.getCmp("relatedParts").removeAll();

              Ext.getCmp("viewport").setActiveItem("mainPanel");
            },
          },
        ],
      });

      var itemsAdd2 = [
        {
          xtype: "combo",
          id: "Type",
          name: "Type",
          store: TypeStore,
          width: 500,
          fieldLabel: "Type",
          displayField: "TypeName",
          valueField: "TypeCode",
          anchor: "100%",
          allowBlank: false,
          selectOnFocus: false,
          editable: false,
        },
        {
          xtype: "combo",
          id: "ProductDesc",
          name: "ProductDesc",
          store: ProductDetStore,
          width: 500,
          fieldLabel: "Product",
          displayField: "CODE",
          valueField: "Id",
          anchor: "100%",
          allowBlank: false,
          selectOnFocus: false,
          anyMatch: true,
          queryMode: "local",
          listeners: {
            change: function () {
              let ProductId = this.getValue();
              getRelatedCatalog(ProductId);
            },
          },
        },
        {
          xtype: "textfield",
          id: "RPCatalog",
          name: "RPCatalog",
          width: 500,
          fieldLabel: "Product description",
          anchor: "100%",
          editable: false,
          hideTrigger: true,
          allowBlank: true,
          selectOnFocus: false,
        },
      ];

      var screenAdd2 = new Ext.FormPanel({
        frame: false,
        header: false,
        border: false,
        id: "screenAdd2",
        defaults: {
          labelAlign: "right",
          labelWidth: 105,
        },
        width: 1200,
        waitMsgTarget: true,
        autoScroll: true,
        style: "padding: 3px 3px 3px 3px;",
        items: [
          {
            layout: "column",
            layoutConfig: { columns: 2 },
            border: false,
            items: [
              {
                xtype: 'my-form',
                id: "addForm2",
                columnWidth: 0.9,
                border: false,
                items: itemsAdd2,
              },
            ],
          },
        ],
      });
      // outer panel container to hold tbar and keypress definitions
      var panelAdd2 = new Ext.Panel({
        layout: "fit",
        id: "panelAdd2",
        title: "Add Related Product",
        header: true,
        items: [screenAdd2],
        tbar: [
          {
            text: "Save",
            id: "fromAddSave",
            iconCls: "fas fa-save",
            handler: function () {
              // Baptiste
              addRelatedProd();
              resetForm2()
              Ext.getCmp("viewport").setActiveItem("mainPanel");
            },
          },
          {
            text: "Save",
            id: "fromViewSave",
            iconCls: "fas fa-save",
            handler: function () {
              addRelatedProdFromView();
              resetForm2();
              Ext.getCmp("relatedProducts").removeAll();
              Ext.getCmp("relatedAccessories").removeAll();
              Ext.getCmp("relatedParts").removeAll();
              Ext.getCmp("viewport").setActiveItem("mainPanel");
            },
          },
          "-",
          {
            text: "Cancel",
            tooltip: "Cancel",
            iconCls: "fas fa-undo",
            handler: function () {
              resetForm2();
              Ext.getCmp("viewport").setActiveItem("mainPanel");
              Ext.getCmp("relatedProducts").removeAll();
              Ext.getCmp("relatedAccessories").removeAll();
              Ext.getCmp("relatedParts").removeAll();
            },
          },
        ],
      });

      var addRelatedProd = function (globalProductID) {
        Ext.getBody().mask("Saving", "x-msg-loading");
        Ext.Ajax.request({
          url: "/api/addRelatedProduct",
          method: "POST",
          cors: true,
          useDefaultXhrHeader: false,
          params: {
            Type: Ext.getCmp("Type").getValue(),
            LinkedProductID: Ext.getCmp("ProductDesc").getValue(),
            Sequence: 0,
            Code: Ext.getCmp("ProductDesc").getRawValue(),
            Catalog: Ext.getCmp("RPCatalog").getValue(),
          },
          success: function (response) {
            // check for errors and display error message
            var check = response.responseText;
            if (check) {
              var data = eval("(" + response.responseText + ")");
              if (data.serverStatus == 2) {
                Ext.getBody().unmask();
                Ext.Msg.alert(
                  "Success",
                  "You have successfully add the related product"
                );
              } else {
                // display error message
                Ext.getBody().unmask();
                Ext.Msg.alert(
                  "ERROR",
                  "Failed to add the related product. Contact your IT team."
                );
              }
            }
          },
          failure: function (response) {
            Ext.getBody().unmask();
            Ext.Msg.alert(
              "ERROR",
              "Failed to add the related product. Contact your IT team."
            );
          },
        });
      };


      var addRelatedProdFromView = function (globalProductID) {
        Ext.getBody().mask("Saving", "x-msg-loading");
        Ext.Ajax.request({
          url: "/api/addRelatedProductFromView",
          method: "POST",
          cors: true,
          useDefaultXhrHeader: false,
          params: {
            Type: Ext.getCmp("Type").getValue(),
            LinkedProductID: Ext.getCmp("ProductDesc").getValue(),
            productIDGlobal: productIDGlobal,
            Code: Ext.getCmp("ProductDesc").getRawValue(),
            Catalog: Ext.getCmp("RPCatalog").getValue(),
          },
          success: function (response) {
            // check for errors and display error message
            var check = response.responseText;
            if (check) {
              var data = eval("(" + response.responseText + ")");
              if (data.serverStatus == 2) {
                Ext.getBody().unmask();
                Ext.Msg.alert(
                  "Success",
                  "You have successfully add the related product"
                );
              } else {
                // display error message
                Ext.getBody().unmask();
                Ext.Msg.alert(
                  "ERROR",
                  "Failed to add the related product. Contact your IT team."
                );
              }
            }
          },
          failure: function (response) {
            Ext.getBody().unmask();
            Ext.Msg.alert(
              "ERROR",
              "Failed to add the related product. Contact your IT team."
            );
          },
        });
      };

      var deleteProduct = function () {
        const selectedRecord = Ext.getCmp("AllProductGrid")
          .getSelectionModel()
          .getSelection()[0];
        Ext.Msg.confirm('Confirm delete', "Are you sure you want to remove this product ?", function (btn, text) {
          if (btn == 'yes') {
            Ext.getBody().mask('Deleting', 'x-msg-loading');
            Ext.Ajax.request({
              url: "/api/deleteProduct",
              method: "POST",
              cors: true,
              useDefaultXhrHeader: false,
              params: {
                ProductId: selectedRecord.data.Id
              },
              success: function (response) {
                // check for errors and display error message
                var check = response.responseText;
                if (check) {
                  var data = eval("(" + response.responseText + ")");

                  if (data.serverStatus == 2) {
                    mainStore.reload();
                    Ext.getBody().unmask();
                    Ext.Msg.alert(
                      "Success",
                      "You have successfully deleted the product"
                    );
                  } else {
                    // display error message
                    Ext.getBody().unmask();
                    Ext.Msg.alert(
                      "ERROR",
                      "Failed to delete the product. Contact your IT team."
                    );
                  }
                }
              },
              failure: function (response) {
                Ext.getBody().unmask();
                Ext.Msg.alert(
                  "ERROR",
                  "Failed to delete product. Contact your IT team."
                );
              },

            });

          }
        })
      }

      const RelatedDesc = Ext.define("RelatedDesc", {
        extend: "Ext.data.Model",
        fields: ["Description"],
      });

      //=========================================================================================================
      //		           VIEW PORT
      // ========================================================================================================

      Ext.create("Ext.container.Viewport", {
        id: "viewport",
        layout: "card",
        activeItem: 0,
        items: [mainPanel, productDetails, panelAdd, panelAdd2],
      });
    });

  </script>
</head>

<body></body>

</html>